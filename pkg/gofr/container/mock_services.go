// Code generated by MockGen. DO NOT EDIT.
// Source: services.go
//
// Generated by this command:
//
//	mockgen -source=services.go -destination=mock_services.go -package=container
//

// Package container is a generated GoMock package.
package container

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOpenai is a mock of Openai interface.
type MockOpenai struct {
	ctrl     *gomock.Controller
	recorder *MockOpenaiMockRecorder
	isgomock struct{}
}

// MockOpenaiMockRecorder is the mock recorder for MockOpenai.
type MockOpenaiMockRecorder struct {
	mock *MockOpenai
}

// NewMockOpenai creates a new mock instance.
func NewMockOpenai(ctrl *gomock.Controller) *MockOpenai {
	mock := &MockOpenai{ctrl: ctrl}
	mock.recorder = &MockOpenaiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenai) EXPECT() *MockOpenaiMockRecorder {
	return m.recorder
}

// CreateCompletions mocks base method.
func (m *MockOpenai) CreateCompletions(ctx context.Context, r any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompletions", ctx, r)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompletions indicates an expected call of CreateCompletions.
func (mr *MockOpenaiMockRecorder) CreateCompletions(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompletions", reflect.TypeOf((*MockOpenai)(nil).CreateCompletions), ctx, r)
}

// MockOpenaiProvider is a mock of OpenaiProvider interface.
type MockOpenaiProvider struct {
	ctrl     *gomock.Controller
	recorder *MockOpenaiProviderMockRecorder
	isgomock struct{}
}

// MockOpenaiProviderMockRecorder is the mock recorder for MockOpenaiProvider.
type MockOpenaiProviderMockRecorder struct {
	mock *MockOpenaiProvider
}

// NewMockOpenaiProvider creates a new mock instance.
func NewMockOpenaiProvider(ctrl *gomock.Controller) *MockOpenaiProvider {
	mock := &MockOpenaiProvider{ctrl: ctrl}
	mock.recorder = &MockOpenaiProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenaiProvider) EXPECT() *MockOpenaiProviderMockRecorder {
	return m.recorder
}

// CreateCompletions mocks base method.
func (m *MockOpenaiProvider) CreateCompletions(ctx context.Context, r any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompletions", ctx, r)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompletions indicates an expected call of CreateCompletions.
func (mr *MockOpenaiProviderMockRecorder) CreateCompletions(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompletions", reflect.TypeOf((*MockOpenaiProvider)(nil).CreateCompletions), ctx, r)
}

// InitMetrics mocks base method.
func (m *MockOpenaiProvider) InitMetrics() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitMetrics")
}

// InitMetrics indicates an expected call of InitMetrics.
func (mr *MockOpenaiProviderMockRecorder) InitMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitMetrics", reflect.TypeOf((*MockOpenaiProvider)(nil).InitMetrics))
}

// UseLogger mocks base method.
func (m *MockOpenaiProvider) UseLogger(logger any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseLogger", logger)
}

// UseLogger indicates an expected call of UseLogger.
func (mr *MockOpenaiProviderMockRecorder) UseLogger(logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseLogger", reflect.TypeOf((*MockOpenaiProvider)(nil).UseLogger), logger)
}

// UseMetrics mocks base method.
func (m *MockOpenaiProvider) UseMetrics(metrics any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseMetrics", metrics)
}

// UseMetrics indicates an expected call of UseMetrics.
func (mr *MockOpenaiProviderMockRecorder) UseMetrics(metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseMetrics", reflect.TypeOf((*MockOpenaiProvider)(nil).UseMetrics), metrics)
}

// UseTracer mocks base method.
func (m *MockOpenaiProvider) UseTracer(tracer any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseTracer", tracer)
}

// UseTracer indicates an expected call of UseTracer.
func (mr *MockOpenaiProviderMockRecorder) UseTracer(tracer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseTracer", reflect.TypeOf((*MockOpenaiProvider)(nil).UseTracer), tracer)
}

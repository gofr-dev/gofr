// Code generated by MockGen. DO NOT EDIT.
// Source: services.go
//
// Generated by this command:
//
//	mockgen -source=services.go -destination=mock_services.go -package=container
//

// Package container is a generated GoMock package.
package container

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOpenAI is a mock of OpenAI interface.
type MockOpenAI struct {
	ctrl     *gomock.Controller
	recorder *MockOpenAIMockRecorder
	isgomock struct{}
}

// MockOpenAIMockRecorder is the mock recorder for MockOpenAI.
type MockOpenAIMockRecorder struct {
	mock *MockOpenAI
}

// NewMockOpenAI creates a new mock instance.
func NewMockOpenAI(ctrl *gomock.Controller) *MockOpenAI {
	mock := &MockOpenAI{ctrl: ctrl}
	mock.recorder = &MockOpenAIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenAI) EXPECT() *MockOpenAIMockRecorder {
	return m.recorder
}

// CreateCompletions mocks base method.
func (m *MockOpenAI) CreateCompletions(ctx context.Context, r any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompletions", ctx, r)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompletions indicates an expected call of CreateCompletions.
func (mr *MockOpenAIMockRecorder) CreateCompletions(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompletions", reflect.TypeOf((*MockOpenAI)(nil).CreateCompletions), ctx, r)
}

// MockOpenAIProvider is a mock of OpenAIProvider interface.
type MockOpenAIProvider struct {
	ctrl     *gomock.Controller
	recorder *MockOpenAIProviderMockRecorder
	isgomock struct{}
}

// MockOpenAIProviderMockRecorder is the mock recorder for MockOpenAIProvider.
type MockOpenAIProviderMockRecorder struct {
	mock *MockOpenAIProvider
}

// NewMockOpenAIProvider creates a new mock instance.
func NewMockOpenAIProvider(ctrl *gomock.Controller) *MockOpenAIProvider {
	mock := &MockOpenAIProvider{ctrl: ctrl}
	mock.recorder = &MockOpenAIProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenAIProvider) EXPECT() *MockOpenAIProviderMockRecorder {
	return m.recorder
}

// CreateCompletions mocks base method.
func (m *MockOpenAIProvider) CreateCompletions(ctx context.Context, r any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompletions", ctx, r)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompletions indicates an expected call of CreateCompletions.
func (mr *MockOpenAIProviderMockRecorder) CreateCompletions(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompletions", reflect.TypeOf((*MockOpenAIProvider)(nil).CreateCompletions), ctx, r)
}

// InitMetrics mocks base method.
func (m *MockOpenAIProvider) InitMetrics() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitMetrics")
}

// InitMetrics indicates an expected call of InitMetrics.
func (mr *MockOpenAIProviderMockRecorder) InitMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitMetrics", reflect.TypeOf((*MockOpenAIProvider)(nil).InitMetrics))
}

// UseLogger mocks base method.
func (m *MockOpenAIProvider) UseLogger(logger any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseLogger", logger)
}

// UseLogger indicates an expected call of UseLogger.
func (mr *MockOpenAIProviderMockRecorder) UseLogger(logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseLogger", reflect.TypeOf((*MockOpenAIProvider)(nil).UseLogger), logger)
}

// UseMetrics mocks base method.
func (m *MockOpenAIProvider) UseMetrics(metrics any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseMetrics", metrics)
}

// UseMetrics indicates an expected call of UseMetrics.
func (mr *MockOpenAIProviderMockRecorder) UseMetrics(metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseMetrics", reflect.TypeOf((*MockOpenAIProvider)(nil).UseMetrics), metrics)
}

// UseTracer mocks base method.
func (m *MockOpenAIProvider) UseTracer(tracer any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseTracer", tracer)
}

// UseTracer indicates an expected call of UseTracer.
func (mr *MockOpenAIProviderMockRecorder) UseTracer(tracer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseTracer", reflect.TypeOf((*MockOpenAIProvider)(nil).UseTracer), tracer)
}

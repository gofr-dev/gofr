// Code generated by MockGen. DO NOT EDIT.
// Source: datasource.go
//
// Generated by this command:
//
//	mockgen -source=datasource.go -destination=mock_datasource.go -package=migration
//

// Package migration is a generated GoMock package.
package migration

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	container "gofr.dev/pkg/gofr/container"
)

// MockMigrator is a mock of Migrator interface.
type MockMigrator struct {
	ctrl     *gomock.Controller
	recorder *MockMigratorMockRecorder
}

// MockMigratorMockRecorder is the mock recorder for MockMigrator.
type MockMigratorMockRecorder struct {
	mock *MockMigrator
}

// NewMockMigrator creates a new mock instance.
func NewMockMigrator(ctrl *gomock.Controller) *MockMigrator {
	mock := &MockMigrator{ctrl: ctrl}
	mock.recorder = &MockMigratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMigrator) EXPECT() *MockMigratorMockRecorder {
	return m.recorder
}

// beginTransaction mocks base method.
func (m *MockMigrator) beginTransaction(c *container.Container) migrationData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "beginTransaction", c)
	ret0, _ := ret[0].(migrationData)
	return ret0
}

// beginTransaction indicates an expected call of beginTransaction.
func (mr *MockMigratorMockRecorder) beginTransaction(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "beginTransaction", reflect.TypeOf((*MockMigrator)(nil).beginTransaction), c)
}

// checkAndCreateMigrationTable mocks base method.
func (m *MockMigrator) checkAndCreateMigrationTable(c *container.Container) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "checkAndCreateMigrationTable", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// checkAndCreateMigrationTable indicates an expected call of checkAndCreateMigrationTable.
func (mr *MockMigratorMockRecorder) checkAndCreateMigrationTable(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "checkAndCreateMigrationTable", reflect.TypeOf((*MockMigrator)(nil).checkAndCreateMigrationTable), c)
}

// commitMigration mocks base method.
func (m *MockMigrator) commitMigration(c *container.Container, data migrationData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "commitMigration", c, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// commitMigration indicates an expected call of commitMigration.
func (mr *MockMigratorMockRecorder) commitMigration(c, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "commitMigration", reflect.TypeOf((*MockMigrator)(nil).commitMigration), c, data)
}

// getLastMigration mocks base method.
func (m *MockMigrator) getLastMigration(c *container.Container) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getLastMigration", c)
	ret0, _ := ret[0].(int64)
	return ret0
}

// getLastMigration indicates an expected call of getLastMigration.
func (mr *MockMigratorMockRecorder) getLastMigration(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getLastMigration", reflect.TypeOf((*MockMigrator)(nil).getLastMigration), c)
}

// rollback mocks base method.
func (m *MockMigrator) rollback(c *container.Container, data migrationData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "rollback", c, data)
}

// rollback indicates an expected call of rollback.
func (mr *MockMigratorMockRecorder) rollback(c, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "rollback", reflect.TypeOf((*MockMigrator)(nil).rollback), c, data)
}

// MockOptions is a mock of Options interface.
type MockOptions struct {
	ctrl     *gomock.Controller
	recorder *MockOptionsMockRecorder
}

// MockOptionsMockRecorder is the mock recorder for MockOptions.
type MockOptionsMockRecorder struct {
	mock *MockOptions
}

// NewMockOptions creates a new mock instance.
func NewMockOptions(ctrl *gomock.Controller) *MockOptions {
	mock := &MockOptions{ctrl: ctrl}
	mock.recorder = &MockOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOptions) EXPECT() *MockOptionsMockRecorder {
	return m.recorder
}

// apply mocks base method.
func (m_2 *MockOptions) apply(m Migrator) Migrator {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "apply", m)
	ret0, _ := ret[0].(Migrator)
	return ret0
}

// apply indicates an expected call of apply.
func (mr *MockOptionsMockRecorder) apply(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "apply", reflect.TypeOf((*MockOptions)(nil).apply), m)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: redis.go
//
// Generated by this command:
//
//	mockgen -source=redis.go -destination=mock_redis.go -package=migration
//

// Package migration is a generated GoMock package.
package migration

import (
	context "context"
	reflect "reflect"
	time "time"

	red "github.com/redis/go-redis/v9"
	gomock "go.uber.org/mock/gomock"
)

// Mockcommands is a mock of commands interface.
type Mockcommands struct {
	ctrl     *gomock.Controller
	recorder *MockcommandsMockRecorder
}

// MockcommandsMockRecorder is the mock recorder for Mockcommands.
type MockcommandsMockRecorder struct {
	mock *Mockcommands
}

// NewMockcommands creates a new mock instance.
func NewMockcommands(ctrl *gomock.Controller) *Mockcommands {
	mock := &Mockcommands{ctrl: ctrl}
	mock.recorder = &MockcommandsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcommands) EXPECT() *MockcommandsMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *Mockcommands) Del(ctx context.Context, keys ...string) *red.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(*red.IntCmd)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockcommandsMockRecorder) Del(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*Mockcommands)(nil).Del), varargs...)
}

// Get mocks base method.
func (m *Mockcommands) Get(ctx context.Context, key string) *red.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(*red.StringCmd)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockcommandsMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockcommands)(nil).Get), ctx, key)
}

// Rename mocks base method.
func (m *Mockcommands) Rename(ctx context.Context, key, newKey string) *red.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", ctx, key, newKey)
	ret0, _ := ret[0].(*red.StatusCmd)
	return ret0
}

// Rename indicates an expected call of Rename.
func (mr *MockcommandsMockRecorder) Rename(ctx, key, newKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*Mockcommands)(nil).Rename), ctx, key, newKey)
}

// Set mocks base method.
func (m *Mockcommands) Set(ctx context.Context, key string, value any, expiration time.Duration) *red.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(*red.StatusCmd)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockcommandsMockRecorder) Set(ctx, key, value, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*Mockcommands)(nil).Set), ctx, key, value, expiration)
}

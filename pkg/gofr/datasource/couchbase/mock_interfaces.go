// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/gofr/datasource/couchbase/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=pkg/gofr/datasource/couchbase/interfaces.go -destination=pkg/gofr/datasource/couchbase/mock_interfaces.go -package=couchbase
//

// Package couchbase is a generated GoMock package.
package couchbase

import (
	context "context"
	reflect "reflect"
	time "time"

	gocb "github.com/couchbase/gocb/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockclusterProvider is a mock of clusterProvider interface.
type MockclusterProvider struct {
	ctrl     *gomock.Controller
	recorder *MockclusterProviderMockRecorder
	isgomock struct{}
}

// MockclusterProviderMockRecorder is the mock recorder for MockclusterProvider.
type MockclusterProviderMockRecorder struct {
	mock *MockclusterProvider
}

// NewMockclusterProvider creates a new mock instance.
func NewMockclusterProvider(ctrl *gomock.Controller) *MockclusterProvider {
	mock := &MockclusterProvider{ctrl: ctrl}
	mock.recorder = &MockclusterProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclusterProvider) EXPECT() *MockclusterProviderMockRecorder {
	return m.recorder
}

// AnalyticsQuery mocks base method.
func (m *MockclusterProvider) AnalyticsQuery(statement string, opts *gocb.AnalyticsOptions) (*gocb.AnalyticsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyticsQuery", statement, opts)
	ret0, _ := ret[0].(*gocb.AnalyticsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyticsQuery indicates an expected call of AnalyticsQuery.
func (mr *MockclusterProviderMockRecorder) AnalyticsQuery(statement, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyticsQuery", reflect.TypeOf((*MockclusterProvider)(nil).AnalyticsQuery), statement, opts)
}

// Bucket mocks base method.
func (m *MockclusterProvider) Bucket(bucketName string) *gocb.Bucket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bucket", bucketName)
	ret0, _ := ret[0].(*gocb.Bucket)
	return ret0
}

// Bucket indicates an expected call of Bucket.
func (mr *MockclusterProviderMockRecorder) Bucket(bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bucket", reflect.TypeOf((*MockclusterProvider)(nil).Bucket), bucketName)
}

// WaitUntilReady mocks base method.
func (m *MockclusterProvider) WaitUntilReady(timeout time.Duration, opts *gocb.WaitUntilReadyOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilReady", timeout, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReady indicates an expected call of WaitUntilReady.
func (mr *MockclusterProviderMockRecorder) WaitUntilReady(timeout, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReady", reflect.TypeOf((*MockclusterProvider)(nil).WaitUntilReady), timeout, opts)
}

// MockbucketProvider is a mock of bucketProvider interface.
type MockbucketProvider struct {
	ctrl     *gomock.Controller
	recorder *MockbucketProviderMockRecorder
	isgomock struct{}
}

// MockbucketProviderMockRecorder is the mock recorder for MockbucketProvider.
type MockbucketProviderMockRecorder struct {
	mock *MockbucketProvider
}

// NewMockbucketProvider creates a new mock instance.
func NewMockbucketProvider(ctrl *gomock.Controller) *MockbucketProvider {
	mock := &MockbucketProvider{ctrl: ctrl}
	mock.recorder = &MockbucketProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbucketProvider) EXPECT() *MockbucketProviderMockRecorder {
	return m.recorder
}

// Collection mocks base method.
func (m *MockbucketProvider) Collection(collectionName string) collectionProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", collectionName)
	ret0, _ := ret[0].(collectionProvider)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockbucketProviderMockRecorder) Collection(collectionName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockbucketProvider)(nil).Collection), collectionName)
}

// DefaultCollection mocks base method.
func (m *MockbucketProvider) DefaultCollection() collectionProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultCollection")
	ret0, _ := ret[0].(collectionProvider)
	return ret0
}

// DefaultCollection indicates an expected call of DefaultCollection.
func (mr *MockbucketProviderMockRecorder) DefaultCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultCollection", reflect.TypeOf((*MockbucketProvider)(nil).DefaultCollection))
}

// WaitUntilReady mocks base method.
func (m *MockbucketProvider) WaitUntilReady(timeout time.Duration, opts *gocb.WaitUntilReadyOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilReady", timeout, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReady indicates an expected call of WaitUntilReady.
func (mr *MockbucketProviderMockRecorder) WaitUntilReady(timeout, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReady", reflect.TypeOf((*MockbucketProvider)(nil).WaitUntilReady), timeout, opts)
}

// MockgocbProvider is a mock of gocbProvider interface.
type MockgocbProvider struct {
	ctrl     *gomock.Controller
	recorder *MockgocbProviderMockRecorder
	isgomock struct{}
}

// MockgocbProviderMockRecorder is the mock recorder for MockgocbProvider.
type MockgocbProviderMockRecorder struct {
	mock *MockgocbProvider
}

// NewMockgocbProvider creates a new mock instance.
func NewMockgocbProvider(ctrl *gomock.Controller) *MockgocbProvider {
	mock := &MockgocbProvider{ctrl: ctrl}
	mock.recorder = &MockgocbProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgocbProvider) EXPECT() *MockgocbProviderMockRecorder {
	return m.recorder
}

// AnalyticsQuery mocks base method.
func (m *MockgocbProvider) AnalyticsQuery(ctx context.Context, statement string, params map[string]any, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyticsQuery", ctx, statement, params, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// AnalyticsQuery indicates an expected call of AnalyticsQuery.
func (mr *MockgocbProviderMockRecorder) AnalyticsQuery(ctx, statement, params, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyticsQuery", reflect.TypeOf((*MockgocbProvider)(nil).AnalyticsQuery), ctx, statement, params, result)
}

// Close mocks base method.
func (m *MockgocbProvider) Close(opts any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockgocbProviderMockRecorder) Close(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockgocbProvider)(nil).Close), opts)
}

// Connect mocks base method.
func (m *MockgocbProvider) Connect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connect")
}

// Connect indicates an expected call of Connect.
func (mr *MockgocbProviderMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockgocbProvider)(nil).Connect))
}

// Get mocks base method.
func (m *MockgocbProvider) Get(ctx context.Context, bucket, key string, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, bucket, key, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockgocbProviderMockRecorder) Get(ctx, bucket, key, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockgocbProvider)(nil).Get), ctx, bucket, key, result)
}

// HealthCheck mocks base method.
func (m *MockgocbProvider) HealthCheck(arg0 context.Context) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", arg0)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockgocbProviderMockRecorder) HealthCheck(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockgocbProvider)(nil).HealthCheck), arg0)
}

// Query mocks base method.
func (m *MockgocbProvider) Query(ctx context.Context, statement string, params map[string]any, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, statement, params, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockgocbProviderMockRecorder) Query(ctx, statement, params, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockgocbProvider)(nil).Query), ctx, statement, params, result)
}

// Remove mocks base method.
func (m *MockgocbProvider) Remove(ctx context.Context, bucket, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, bucket, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockgocbProviderMockRecorder) Remove(ctx, bucket, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockgocbProvider)(nil).Remove), ctx, bucket, key)
}

// Upsert mocks base method.
func (m *MockgocbProvider) Upsert(ctx context.Context, bucket, key string, document, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, bucket, key, document, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockgocbProviderMockRecorder) Upsert(ctx, bucket, key, document, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockgocbProvider)(nil).Upsert), ctx, bucket, key, document, result)
}

// UseLogger mocks base method.
func (m *MockgocbProvider) UseLogger(logger any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseLogger", logger)
}

// UseLogger indicates an expected call of UseLogger.
func (mr *MockgocbProviderMockRecorder) UseLogger(logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseLogger", reflect.TypeOf((*MockgocbProvider)(nil).UseLogger), logger)
}

// UseMetrics mocks base method.
func (m *MockgocbProvider) UseMetrics(metrics any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseMetrics", metrics)
}

// UseMetrics indicates an expected call of UseMetrics.
func (mr *MockgocbProviderMockRecorder) UseMetrics(metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseMetrics", reflect.TypeOf((*MockgocbProvider)(nil).UseMetrics), metrics)
}

// UseTracer mocks base method.
func (m *MockgocbProvider) UseTracer(tracer any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseTracer", tracer)
}

// UseTracer indicates an expected call of UseTracer.
func (mr *MockgocbProviderMockRecorder) UseTracer(tracer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseTracer", reflect.TypeOf((*MockgocbProvider)(nil).UseTracer), tracer)
}

// MockcollectionProvider is a mock of collectionProvider interface.
type MockcollectionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockcollectionProviderMockRecorder
	isgomock struct{}
}

// MockcollectionProviderMockRecorder is the mock recorder for MockcollectionProvider.
type MockcollectionProviderMockRecorder struct {
	mock *MockcollectionProvider
}

// NewMockcollectionProvider creates a new mock instance.
func NewMockcollectionProvider(ctrl *gomock.Controller) *MockcollectionProvider {
	mock := &MockcollectionProvider{ctrl: ctrl}
	mock.recorder = &MockcollectionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcollectionProvider) EXPECT() *MockcollectionProviderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockcollectionProvider) Get(id string, opts *gocb.GetOptions) (*gocb.GetResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id, opts)
	ret0, _ := ret[0].(*gocb.GetResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockcollectionProviderMockRecorder) Get(id, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockcollectionProvider)(nil).Get), id, opts)
}

// Remove mocks base method.
func (m *MockcollectionProvider) Remove(id string, opts *gocb.RemoveOptions) (*gocb.MutationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", id, opts)
	ret0, _ := ret[0].(*gocb.MutationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove.
func (mr *MockcollectionProviderMockRecorder) Remove(id, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockcollectionProvider)(nil).Remove), id, opts)
}

// Upsert mocks base method.
func (m *MockcollectionProvider) Upsert(id string, val any, opts *gocb.UpsertOptions) (*gocb.MutationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", id, val, opts)
	ret0, _ := ret[0].(*gocb.MutationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockcollectionProviderMockRecorder) Upsert(id, val, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockcollectionProvider)(nil).Upsert), id, val, opts)
}

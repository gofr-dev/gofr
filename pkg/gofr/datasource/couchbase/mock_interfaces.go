// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mock_interfaces.go -package=couchbase
//

// Package couchbase is a generated GoMock package.
package couchbase

import (
	context "context"
	reflect "reflect"
	time "time"

	gocb "github.com/couchbase/gocb/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockCouchbase is a mock of Couchbase interface.
type MockCouchbase struct {
	ctrl     *gomock.Controller
	recorder *MockCouchbaseMockRecorder
	isgomock struct{}
}

// MockCouchbaseMockRecorder is the mock recorder for MockCouchbase.
type MockCouchbaseMockRecorder struct {
	mock *MockCouchbase
}

// NewMockCouchbase creates a new mock instance.
func NewMockCouchbase(ctrl *gomock.Controller) *MockCouchbase {
	mock := &MockCouchbase{ctrl: ctrl}
	mock.recorder = &MockCouchbaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCouchbase) EXPECT() *MockCouchbaseMockRecorder {
	return m.recorder
}

// AnalyticsQuery mocks base method.
func (m *MockCouchbase) AnalyticsQuery(ctx context.Context, statement string, params map[string]any, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyticsQuery", ctx, statement, params, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// AnalyticsQuery indicates an expected call of AnalyticsQuery.
func (mr *MockCouchbaseMockRecorder) AnalyticsQuery(ctx, statement, params, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyticsQuery", reflect.TypeOf((*MockCouchbase)(nil).AnalyticsQuery), ctx, statement, params, result)
}

// Close mocks base method.
func (m *MockCouchbase) Close(opts any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCouchbaseMockRecorder) Close(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCouchbase)(nil).Close), opts)
}

// Get mocks base method.
func (m *MockCouchbase) Get(ctx context.Context, key string, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockCouchbaseMockRecorder) Get(ctx, key, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCouchbase)(nil).Get), ctx, key, result)
}

// InsertMany mocks base method.
func (m *MockCouchbase) InsertMany(ctx context.Context, documents map[string]any, results any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMany", ctx, documents, results)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMany indicates an expected call of InsertMany.
func (mr *MockCouchbaseMockRecorder) InsertMany(ctx, documents, results any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMany", reflect.TypeOf((*MockCouchbase)(nil).InsertMany), ctx, documents, results)
}

// InsertOne mocks base method.
func (m *MockCouchbase) InsertOne(ctx context.Context, key string, document, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", ctx, key, document, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockCouchbaseMockRecorder) InsertOne(ctx, key, document, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockCouchbase)(nil).InsertOne), ctx, key, document, result)
}

// Query mocks base method.
func (m *MockCouchbase) Query(ctx context.Context, statement string, params map[string]any, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, statement, params, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockCouchbaseMockRecorder) Query(ctx, statement, params, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockCouchbase)(nil).Query), ctx, statement, params, result)
}

// Remove mocks base method.
func (m *MockCouchbase) Remove(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockCouchbaseMockRecorder) Remove(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockCouchbase)(nil).Remove), ctx, key)
}

// RunTransaction mocks base method.
func (m *MockCouchbase) RunTransaction(ctx context.Context, logic func(*gocb.TransactionAttemptContext) error) (*gocb.TransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTransaction", ctx, logic)
	ret0, _ := ret[0].(*gocb.TransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunTransaction indicates an expected call of RunTransaction.
func (mr *MockCouchbaseMockRecorder) RunTransaction(ctx, logic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTransaction", reflect.TypeOf((*MockCouchbase)(nil).RunTransaction), ctx, logic)
}

// Upsert mocks base method.
func (m *MockCouchbase) Upsert(ctx context.Context, key string, document, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, key, document, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockCouchbaseMockRecorder) Upsert(ctx, key, document, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockCouchbase)(nil).Upsert), ctx, key, document, result)
}

// MockclusterProvider is a mock of clusterProvider interface.
type MockclusterProvider struct {
	ctrl     *gomock.Controller
	recorder *MockclusterProviderMockRecorder
	isgomock struct{}
}

// MockclusterProviderMockRecorder is the mock recorder for MockclusterProvider.
type MockclusterProviderMockRecorder struct {
	mock *MockclusterProvider
}

// NewMockclusterProvider creates a new mock instance.
func NewMockclusterProvider(ctrl *gomock.Controller) *MockclusterProvider {
	mock := &MockclusterProvider{ctrl: ctrl}
	mock.recorder = &MockclusterProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclusterProvider) EXPECT() *MockclusterProviderMockRecorder {
	return m.recorder
}

// AnalyticsQuery mocks base method.
func (m *MockclusterProvider) AnalyticsQuery(statement string, opts *gocb.AnalyticsOptions) (resultProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyticsQuery", statement, opts)
	ret0, _ := ret[0].(resultProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyticsQuery indicates an expected call of AnalyticsQuery.
func (mr *MockclusterProviderMockRecorder) AnalyticsQuery(statement, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyticsQuery", reflect.TypeOf((*MockclusterProvider)(nil).AnalyticsQuery), statement, opts)
}

// Bucket mocks base method.
func (m *MockclusterProvider) Bucket(bucketName string) bucketProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bucket", bucketName)
	ret0, _ := ret[0].(bucketProvider)
	return ret0
}

// Bucket indicates an expected call of Bucket.
func (mr *MockclusterProviderMockRecorder) Bucket(bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bucket", reflect.TypeOf((*MockclusterProvider)(nil).Bucket), bucketName)
}

// Close mocks base method.
func (m *MockclusterProvider) Close(opts *gocb.ClusterCloseOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockclusterProviderMockRecorder) Close(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockclusterProvider)(nil).Close), opts)
}

// Ping mocks base method.
func (m *MockclusterProvider) Ping(opts *gocb.PingOptions) (*gocb.PingResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", opts)
	ret0, _ := ret[0].(*gocb.PingResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockclusterProviderMockRecorder) Ping(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockclusterProvider)(nil).Ping), opts)
}

// Query mocks base method.
func (m *MockclusterProvider) Query(statement string, opts *gocb.QueryOptions) (resultProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", statement, opts)
	ret0, _ := ret[0].(resultProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockclusterProviderMockRecorder) Query(statement, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockclusterProvider)(nil).Query), statement, opts)
}

// Transactions mocks base method.
func (m *MockclusterProvider) Transactions() transactionsProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transactions")
	ret0, _ := ret[0].(transactionsProvider)
	return ret0
}

// Transactions indicates an expected call of Transactions.
func (mr *MockclusterProviderMockRecorder) Transactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transactions", reflect.TypeOf((*MockclusterProvider)(nil).Transactions))
}

// WaitUntilReady mocks base method.
func (m *MockclusterProvider) WaitUntilReady(timeout time.Duration, opts *gocb.WaitUntilReadyOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilReady", timeout, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReady indicates an expected call of WaitUntilReady.
func (mr *MockclusterProviderMockRecorder) WaitUntilReady(timeout, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReady", reflect.TypeOf((*MockclusterProvider)(nil).WaitUntilReady), timeout, opts)
}

// MockresultProvider is a mock of resultProvider interface.
type MockresultProvider struct {
	ctrl     *gomock.Controller
	recorder *MockresultProviderMockRecorder
	isgomock struct{}
}

// MockresultProviderMockRecorder is the mock recorder for MockresultProvider.
type MockresultProviderMockRecorder struct {
	mock *MockresultProvider
}

// NewMockresultProvider creates a new mock instance.
func NewMockresultProvider(ctrl *gomock.Controller) *MockresultProvider {
	mock := &MockresultProvider{ctrl: ctrl}
	mock.recorder = &MockresultProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockresultProvider) EXPECT() *MockresultProviderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockresultProvider) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockresultProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockresultProvider)(nil).Close))
}

// Err mocks base method.
func (m *MockresultProvider) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockresultProviderMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockresultProvider)(nil).Err))
}

// Next mocks base method.
func (m *MockresultProvider) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockresultProviderMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockresultProvider)(nil).Next))
}

// Row mocks base method.
func (m *MockresultProvider) Row(value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Row", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Row indicates an expected call of Row.
func (mr *MockresultProviderMockRecorder) Row(value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Row", reflect.TypeOf((*MockresultProvider)(nil).Row), value)
}

// MockbucketProvider is a mock of bucketProvider interface.
type MockbucketProvider struct {
	ctrl     *gomock.Controller
	recorder *MockbucketProviderMockRecorder
	isgomock struct{}
}

// MockbucketProviderMockRecorder is the mock recorder for MockbucketProvider.
type MockbucketProviderMockRecorder struct {
	mock *MockbucketProvider
}

// NewMockbucketProvider creates a new mock instance.
func NewMockbucketProvider(ctrl *gomock.Controller) *MockbucketProvider {
	mock := &MockbucketProvider{ctrl: ctrl}
	mock.recorder = &MockbucketProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbucketProvider) EXPECT() *MockbucketProviderMockRecorder {
	return m.recorder
}

// Collection mocks base method.
func (m *MockbucketProvider) Collection(collectionName string) collectionProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", collectionName)
	ret0, _ := ret[0].(collectionProvider)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockbucketProviderMockRecorder) Collection(collectionName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockbucketProvider)(nil).Collection), collectionName)
}

// DefaultCollection mocks base method.
func (m *MockbucketProvider) DefaultCollection() collectionProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultCollection")
	ret0, _ := ret[0].(collectionProvider)
	return ret0
}

// DefaultCollection indicates an expected call of DefaultCollection.
func (mr *MockbucketProviderMockRecorder) DefaultCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultCollection", reflect.TypeOf((*MockbucketProvider)(nil).DefaultCollection))
}

// Scope mocks base method.
func (m *MockbucketProvider) Scope(name string) scopeProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scope", name)
	ret0, _ := ret[0].(scopeProvider)
	return ret0
}

// Scope indicates an expected call of Scope.
func (mr *MockbucketProviderMockRecorder) Scope(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scope", reflect.TypeOf((*MockbucketProvider)(nil).Scope), name)
}

// WaitUntilReady mocks base method.
func (m *MockbucketProvider) WaitUntilReady(timeout time.Duration, opts *gocb.WaitUntilReadyOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilReady", timeout, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReady indicates an expected call of WaitUntilReady.
func (mr *MockbucketProviderMockRecorder) WaitUntilReady(timeout, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReady", reflect.TypeOf((*MockbucketProvider)(nil).WaitUntilReady), timeout, opts)
}

// MockcollectionProvider is a mock of collectionProvider interface.
type MockcollectionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockcollectionProviderMockRecorder
	isgomock struct{}
}

// MockcollectionProviderMockRecorder is the mock recorder for MockcollectionProvider.
type MockcollectionProviderMockRecorder struct {
	mock *MockcollectionProvider
}

// NewMockcollectionProvider creates a new mock instance.
func NewMockcollectionProvider(ctrl *gomock.Controller) *MockcollectionProvider {
	mock := &MockcollectionProvider{ctrl: ctrl}
	mock.recorder = &MockcollectionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcollectionProvider) EXPECT() *MockcollectionProviderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockcollectionProvider) Get(key string, opts *gocb.GetOptions) (getResultProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key, opts)
	ret0, _ := ret[0].(getResultProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockcollectionProviderMockRecorder) Get(key, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockcollectionProvider)(nil).Get), key, opts)
}

// Insert mocks base method.
func (m *MockcollectionProvider) Insert(key string, value any, opts *gocb.InsertOptions) (*gocb.MutationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", key, value, opts)
	ret0, _ := ret[0].(*gocb.MutationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockcollectionProviderMockRecorder) Insert(key, value, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockcollectionProvider)(nil).Insert), key, value, opts)
}

// LookupIn mocks base method.
func (m *MockcollectionProvider) LookupIn(key string, specs []gocb.LookupInSpec, opts *gocb.LookupInOptions) (*gocb.LookupInResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupIn", key, specs, opts)
	ret0, _ := ret[0].(*gocb.LookupInResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupIn indicates an expected call of LookupIn.
func (mr *MockcollectionProviderMockRecorder) LookupIn(key, specs, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupIn", reflect.TypeOf((*MockcollectionProvider)(nil).LookupIn), key, specs, opts)
}

// MutateIn mocks base method.
func (m *MockcollectionProvider) MutateIn(key string, specs []gocb.MutateInSpec, opts *gocb.MutateInOptions) (*gocb.MutateInResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MutateIn", key, specs, opts)
	ret0, _ := ret[0].(*gocb.MutateInResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MutateIn indicates an expected call of MutateIn.
func (mr *MockcollectionProviderMockRecorder) MutateIn(key, specs, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MutateIn", reflect.TypeOf((*MockcollectionProvider)(nil).MutateIn), key, specs, opts)
}

// Remove mocks base method.
func (m *MockcollectionProvider) Remove(key string, opts *gocb.RemoveOptions) (*gocb.MutationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", key, opts)
	ret0, _ := ret[0].(*gocb.MutationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove.
func (mr *MockcollectionProviderMockRecorder) Remove(key, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockcollectionProvider)(nil).Remove), key, opts)
}

// Upsert mocks base method.
func (m *MockcollectionProvider) Upsert(key string, value any, opts *gocb.UpsertOptions) (*gocb.MutationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", key, value, opts)
	ret0, _ := ret[0].(*gocb.MutationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockcollectionProviderMockRecorder) Upsert(key, value, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockcollectionProvider)(nil).Upsert), key, value, opts)
}

// MockgetResultProvider is a mock of getResultProvider interface.
type MockgetResultProvider struct {
	ctrl     *gomock.Controller
	recorder *MockgetResultProviderMockRecorder
	isgomock struct{}
}

// MockgetResultProviderMockRecorder is the mock recorder for MockgetResultProvider.
type MockgetResultProviderMockRecorder struct {
	mock *MockgetResultProvider
}

// NewMockgetResultProvider creates a new mock instance.
func NewMockgetResultProvider(ctrl *gomock.Controller) *MockgetResultProvider {
	mock := &MockgetResultProvider{ctrl: ctrl}
	mock.recorder = &MockgetResultProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgetResultProvider) EXPECT() *MockgetResultProviderMockRecorder {
	return m.recorder
}

// Content mocks base method.
func (m *MockgetResultProvider) Content(value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Content", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Content indicates an expected call of Content.
func (mr *MockgetResultProviderMockRecorder) Content(value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Content", reflect.TypeOf((*MockgetResultProvider)(nil).Content), value)
}

// MockscopeProvider is a mock of scopeProvider interface.
type MockscopeProvider struct {
	ctrl     *gomock.Controller
	recorder *MockscopeProviderMockRecorder
	isgomock struct{}
}

// MockscopeProviderMockRecorder is the mock recorder for MockscopeProvider.
type MockscopeProviderMockRecorder struct {
	mock *MockscopeProvider
}

// NewMockscopeProvider creates a new mock instance.
func NewMockscopeProvider(ctrl *gomock.Controller) *MockscopeProvider {
	mock := &MockscopeProvider{ctrl: ctrl}
	mock.recorder = &MockscopeProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockscopeProvider) EXPECT() *MockscopeProviderMockRecorder {
	return m.recorder
}

// Collection mocks base method.
func (m *MockscopeProvider) Collection(name string) collectionProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", name)
	ret0, _ := ret[0].(collectionProvider)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockscopeProviderMockRecorder) Collection(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockscopeProvider)(nil).Collection), name)
}

// MocktransactionsProvider is a mock of transactionsProvider interface.
type MocktransactionsProvider struct {
	ctrl     *gomock.Controller
	recorder *MocktransactionsProviderMockRecorder
	isgomock struct{}
}

// MocktransactionsProviderMockRecorder is the mock recorder for MocktransactionsProvider.
type MocktransactionsProviderMockRecorder struct {
	mock *MocktransactionsProvider
}

// NewMocktransactionsProvider creates a new mock instance.
func NewMocktransactionsProvider(ctrl *gomock.Controller) *MocktransactionsProvider {
	mock := &MocktransactionsProvider{ctrl: ctrl}
	mock.recorder = &MocktransactionsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransactionsProvider) EXPECT() *MocktransactionsProviderMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MocktransactionsProvider) Run(logic func(*gocb.TransactionAttemptContext) error, opts *gocb.TransactionOptions) (*gocb.TransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", logic, opts)
	ret0, _ := ret[0].(*gocb.TransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MocktransactionsProviderMockRecorder) Run(logic, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MocktransactionsProvider)(nil).Run), logic, opts)
}

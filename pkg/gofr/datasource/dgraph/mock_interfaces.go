// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mock_interfaces.go -package=dgraph
//

// Package dgraph is a generated GoMock package.
package dgraph

import (
	context "context"
	reflect "reflect"

	api "github.com/dgraph-io/dgo/v210/protos/api"
	gomock "go.uber.org/mock/gomock"
)

// MockTxn is a mock of Txn interface.
type MockTxn struct {
	ctrl     *gomock.Controller
	recorder *MockTxnMockRecorder
}

// MockTxnMockRecorder is the mock recorder for MockTxn.
type MockTxnMockRecorder struct {
	mock *MockTxn
}

// NewMockTxn creates a new mock instance.
func NewMockTxn(ctrl *gomock.Controller) *MockTxn {
	mock := &MockTxn{ctrl: ctrl}
	mock.recorder = &MockTxnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxn) EXPECT() *MockTxnMockRecorder {
	return m.recorder
}

// BestEffort mocks base method.
func (m *MockTxn) BestEffort() Txn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BestEffort")
	ret0, _ := ret[0].(Txn)
	return ret0
}

// BestEffort indicates an expected call of BestEffort.
func (mr *MockTxnMockRecorder) BestEffort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BestEffort", reflect.TypeOf((*MockTxn)(nil).BestEffort))
}

// Commit mocks base method.
func (m *MockTxn) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTxnMockRecorder) Commit(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTxn)(nil).Commit), ctx)
}

// Discard mocks base method.
func (m *MockTxn) Discard(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Discard", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Discard indicates an expected call of Discard.
func (mr *MockTxnMockRecorder) Discard(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discard", reflect.TypeOf((*MockTxn)(nil).Discard), ctx)
}

// Do mocks base method.
func (m *MockTxn) Do(ctx context.Context, req *api.Request) (*api.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, req)
	ret0, _ := ret[0].(*api.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockTxnMockRecorder) Do(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockTxn)(nil).Do), ctx, req)
}

// Mutate mocks base method.
func (m *MockTxn) Mutate(ctx context.Context, mu *api.Mutation) (*api.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mutate", ctx, mu)
	ret0, _ := ret[0].(*api.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mutate indicates an expected call of Mutate.
func (mr *MockTxnMockRecorder) Mutate(ctx, mu any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mutate", reflect.TypeOf((*MockTxn)(nil).Mutate), ctx, mu)
}

// Query mocks base method.
func (m *MockTxn) Query(ctx context.Context, q string) (*api.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, q)
	ret0, _ := ret[0].(*api.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockTxnMockRecorder) Query(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockTxn)(nil).Query), ctx, q)
}

// QueryRDF mocks base method.
func (m *MockTxn) QueryRDF(ctx context.Context, q string) (*api.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRDF", ctx, q)
	ret0, _ := ret[0].(*api.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRDF indicates an expected call of QueryRDF.
func (mr *MockTxnMockRecorder) QueryRDF(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRDF", reflect.TypeOf((*MockTxn)(nil).QueryRDF), ctx, q)
}

// QueryRDFWithVars mocks base method.
func (m *MockTxn) QueryRDFWithVars(ctx context.Context, q string, vars map[string]string) (*api.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRDFWithVars", ctx, q, vars)
	ret0, _ := ret[0].(*api.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRDFWithVars indicates an expected call of QueryRDFWithVars.
func (mr *MockTxnMockRecorder) QueryRDFWithVars(ctx, q, vars any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRDFWithVars", reflect.TypeOf((*MockTxn)(nil).QueryRDFWithVars), ctx, q, vars)
}

// QueryWithVars mocks base method.
func (m *MockTxn) QueryWithVars(ctx context.Context, q string, vars map[string]string) (*api.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryWithVars", ctx, q, vars)
	ret0, _ := ret[0].(*api.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryWithVars indicates an expected call of QueryWithVars.
func (mr *MockTxnMockRecorder) QueryWithVars(ctx, q, vars any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryWithVars", reflect.TypeOf((*MockTxn)(nil).QueryWithVars), ctx, q, vars)
}

// MockDgraphClient is a mock of DgraphClient interface.
type MockDgraphClient struct {
	ctrl     *gomock.Controller
	recorder *MockDgraphClientMockRecorder
}

// MockDgraphClientMockRecorder is the mock recorder for MockDgraphClient.
type MockDgraphClientMockRecorder struct {
	mock *MockDgraphClient
}

// NewMockDgraphClient creates a new mock instance.
func NewMockDgraphClient(ctrl *gomock.Controller) *MockDgraphClient {
	mock := &MockDgraphClient{ctrl: ctrl}
	mock.recorder = &MockDgraphClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDgraphClient) EXPECT() *MockDgraphClientMockRecorder {
	return m.recorder
}

// Alter mocks base method.
func (m *MockDgraphClient) Alter(ctx context.Context, op *api.Operation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alter", ctx, op)
	ret0, _ := ret[0].(error)
	return ret0
}

// Alter indicates an expected call of Alter.
func (mr *MockDgraphClientMockRecorder) Alter(ctx, op any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alter", reflect.TypeOf((*MockDgraphClient)(nil).Alter), ctx, op)
}

// GetJwt mocks base method.
func (m *MockDgraphClient) GetJwt() api.Jwt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJwt")
	ret0, _ := ret[0].(api.Jwt)
	return ret0
}

// GetJwt indicates an expected call of GetJwt.
func (mr *MockDgraphClientMockRecorder) GetJwt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJwt", reflect.TypeOf((*MockDgraphClient)(nil).GetJwt))
}

// Login mocks base method.
func (m *MockDgraphClient) Login(ctx context.Context, userid, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, userid, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockDgraphClientMockRecorder) Login(ctx, userid, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockDgraphClient)(nil).Login), ctx, userid, password)
}

// LoginIntoNamespace mocks base method.
func (m *MockDgraphClient) LoginIntoNamespace(ctx context.Context, userid, password string, namespace uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginIntoNamespace", ctx, userid, password, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoginIntoNamespace indicates an expected call of LoginIntoNamespace.
func (mr *MockDgraphClientMockRecorder) LoginIntoNamespace(ctx, userid, password, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginIntoNamespace", reflect.TypeOf((*MockDgraphClient)(nil).LoginIntoNamespace), ctx, userid, password, namespace)
}

// NewReadOnlyTxn mocks base method.
func (m *MockDgraphClient) NewReadOnlyTxn() Txn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReadOnlyTxn")
	ret0, _ := ret[0].(Txn)
	return ret0
}

// NewReadOnlyTxn indicates an expected call of NewReadOnlyTxn.
func (mr *MockDgraphClientMockRecorder) NewReadOnlyTxn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReadOnlyTxn", reflect.TypeOf((*MockDgraphClient)(nil).NewReadOnlyTxn))
}

// NewTxn mocks base method.
func (m *MockDgraphClient) NewTxn() Txn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTxn")
	ret0, _ := ret[0].(Txn)
	return ret0
}

// NewTxn indicates an expected call of NewTxn.
func (mr *MockDgraphClientMockRecorder) NewTxn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTxn", reflect.TypeOf((*MockDgraphClient)(nil).NewTxn))
}

// Relogin mocks base method.
func (m *MockDgraphClient) Relogin(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Relogin", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Relogin indicates an expected call of Relogin.
func (mr *MockDgraphClientMockRecorder) Relogin(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relogin", reflect.TypeOf((*MockDgraphClient)(nil).Relogin), ctx)
}

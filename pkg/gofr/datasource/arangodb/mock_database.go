// Code generated by MockGen. DO NOT EDIT.
// Source: database.go
//
// Generated by this command:
//
//	mockgen -source=database.go -destination=./mock_database.go -package=arangodb
//

// Package arangodb is a generated GoMock package.
package arangodb

import (
	context "context"
	reflect "reflect"

	arangodb "github.com/arangodb/go-driver/v2/arangodb"
	gomock "go.uber.org/mock/gomock"
)

// MockArangoDatabase is a mock of database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockArangoDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Analyzer mocks base method.
func (m *MockDatabase) Analyzer(ctx context.Context, name string) (arangodb.Analyzer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Analyzer", ctx, name)
	ret0, _ := ret[0].(arangodb.Analyzer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Analyzer indicates an expected call of Analyzer.
func (mr *MockDatabaseMockRecorder) Analyzer(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Analyzer", reflect.TypeOf((*MockDatabase)(nil).Analyzer), ctx, name)
}

// Analyzers mocks base method.
func (m *MockDatabase) Analyzers(ctx context.Context) (arangodb.AnalyzersResponseReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Analyzers", ctx)
	ret0, _ := ret[0].(arangodb.AnalyzersResponseReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Analyzers indicates an expected call of Analyzers.
func (mr *MockDatabaseMockRecorder) Analyzers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Analyzers", reflect.TypeOf((*MockDatabase)(nil).Analyzers), ctx)
}

// BeginTransaction mocks base method.
func (m *MockDatabase) BeginTransaction(ctx context.Context, cols arangodb.TransactionCollections, opts *arangodb.BeginTransactionOptions) (arangodb.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction", ctx, cols, opts)
	ret0, _ := ret[0].(arangodb.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockDatabaseMockRecorder) BeginTransaction(ctx, cols, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockDatabase)(nil).BeginTransaction), ctx, cols, opts)
}

// Collection mocks base method.
func (m *MockDatabase) Collection(ctx context.Context, name string) (arangodb.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", ctx, name)
	ret0, _ := ret[0].(arangodb.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collection indicates an expected call of Collection.
func (mr *MockDatabaseMockRecorder) Collection(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockDatabase)(nil).Collection), ctx, name)
}

// CollectionExists mocks base method.
func (m *MockDatabase) CollectionExists(ctx context.Context, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectionExists", ctx, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectionExists indicates an expected call of CollectionExists.
func (mr *MockDatabaseMockRecorder) CollectionExists(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectionExists", reflect.TypeOf((*MockDatabase)(nil).CollectionExists), ctx, name)
}

// Collections mocks base method.
func (m *MockDatabase) Collections(ctx context.Context) ([]arangodb.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collections", ctx)
	ret0, _ := ret[0].([]arangodb.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collections indicates an expected call of Collections.
func (mr *MockDatabaseMockRecorder) Collections(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collections", reflect.TypeOf((*MockDatabase)(nil).Collections), ctx)
}

// CreateArangoSearchAliasView mocks base method.
func (m *MockDatabase) CreateArangoSearchAliasView(ctx context.Context, name string, options *arangodb.ArangoSearchAliasViewProperties) (arangodb.ArangoSearchViewAlias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArangoSearchAliasView", ctx, name, options)
	ret0, _ := ret[0].(arangodb.ArangoSearchViewAlias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArangoSearchAliasView indicates an expected call of CreateArangoSearchAliasView.
func (mr *MockDatabaseMockRecorder) CreateArangoSearchAliasView(ctx, name, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArangoSearchAliasView", reflect.TypeOf((*MockDatabase)(nil).CreateArangoSearchAliasView), ctx, name, options)
}

// CreateArangoSearchView mocks base method.
func (m *MockDatabase) CreateArangoSearchView(ctx context.Context, name string, options *arangodb.ArangoSearchViewProperties) (arangodb.ArangoSearchView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArangoSearchView", ctx, name, options)
	ret0, _ := ret[0].(arangodb.ArangoSearchView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArangoSearchView indicates an expected call of CreateArangoSearchView.
func (mr *MockDatabaseMockRecorder) CreateArangoSearchView(ctx, name, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArangoSearchView", reflect.TypeOf((*MockDatabase)(nil).CreateArangoSearchView), ctx, name, options)
}

// CreateCollection mocks base method.
func (m *MockDatabase) CreateCollection(ctx context.Context, name string, props *arangodb.CreateCollectionProperties) (arangodb.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollection", ctx, name, props)
	ret0, _ := ret[0].(arangodb.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollection indicates an expected call of CreateCollection.
func (mr *MockDatabaseMockRecorder) CreateCollection(ctx, name, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollection", reflect.TypeOf((*MockDatabase)(nil).CreateCollection), ctx, name, props)
}

// CreateCollectionWithOptions mocks base method.
func (m *MockDatabase) CreateCollectionWithOptions(ctx context.Context, name string, props *arangodb.CreateCollectionProperties, options *arangodb.CreateCollectionOptions) (arangodb.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollectionWithOptions", ctx, name, props, options)
	ret0, _ := ret[0].(arangodb.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollectionWithOptions indicates an expected call of CreateCollectionWithOptions.
func (mr *MockDatabaseMockRecorder) CreateCollectionWithOptions(ctx, name, props, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollectionWithOptions", reflect.TypeOf((*MockDatabase)(nil).CreateCollectionWithOptions), ctx, name, props, options)
}

// CreateGraph mocks base method.
func (m *MockDatabase) CreateGraph(ctx context.Context, name string, graph *arangodb.GraphDefinition, options *arangodb.CreateGraphOptions) (arangodb.Graph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGraph", ctx, name, graph, options)
	ret0, _ := ret[0].(arangodb.Graph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGraph indicates an expected call of CreateGraph.
func (mr *MockDatabaseMockRecorder) CreateGraph(ctx, name, graph, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraph", reflect.TypeOf((*MockDatabase)(nil).CreateGraph), ctx, name, graph, options)
}

// EnsureAnalyzer mocks base method.
func (m *MockDatabase) EnsureAnalyzer(ctx context.Context, analyzer *arangodb.AnalyzerDefinition) (bool, arangodb.Analyzer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureAnalyzer", ctx, analyzer)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(arangodb.Analyzer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnsureAnalyzer indicates an expected call of EnsureAnalyzer.
func (mr *MockDatabaseMockRecorder) EnsureAnalyzer(ctx, analyzer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureAnalyzer", reflect.TypeOf((*MockDatabase)(nil).EnsureAnalyzer), ctx, analyzer)
}

// ExplainQuery mocks base method.
func (m *MockDatabase) ExplainQuery(ctx context.Context, query string, bindVars map[string]any, opts *arangodb.ExplainQueryOptions) (arangodb.ExplainQueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExplainQuery", ctx, query, bindVars, opts)
	ret0, _ := ret[0].(arangodb.ExplainQueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExplainQuery indicates an expected call of ExplainQuery.
func (mr *MockDatabaseMockRecorder) ExplainQuery(ctx, query, bindVars, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExplainQuery", reflect.TypeOf((*MockDatabase)(nil).ExplainQuery), ctx, query, bindVars, opts)
}

// GetCollection mocks base method.
func (m *MockDatabase) GetCollection(ctx context.Context, name string, options *arangodb.GetCollectionOptions) (arangodb.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollection", ctx, name, options)
	ret0, _ := ret[0].(arangodb.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollection indicates an expected call of GetCollection.
func (mr *MockDatabaseMockRecorder) GetCollection(ctx, name, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockDatabase)(nil).GetCollection), ctx, name, options)
}

// GetEdges mocks base method.
func (m *MockDatabase) GetEdges(ctx context.Context, name, vertex string, options *arangodb.GetEdgesOptions) ([]arangodb.EdgeDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEdges", ctx, name, vertex, options)
	ret0, _ := ret[0].([]arangodb.EdgeDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEdges indicates an expected call of GetEdges.
func (mr *MockDatabaseMockRecorder) GetEdges(ctx, name, vertex, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEdges", reflect.TypeOf((*MockDatabase)(nil).GetEdges), ctx, name, vertex, options)
}

// Graph mocks base method.
func (m *MockDatabase) Graph(ctx context.Context, name string, options *arangodb.GetGraphOptions) (arangodb.Graph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Graph", ctx, name, options)
	ret0, _ := ret[0].(arangodb.Graph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Graph indicates an expected call of Graph.
func (mr *MockDatabaseMockRecorder) Graph(ctx, name, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Graph", reflect.TypeOf((*MockDatabase)(nil).Graph), ctx, name, options)
}

// GraphExists mocks base method.
func (m *MockDatabase) GraphExists(ctx context.Context, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphExists", ctx, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GraphExists indicates an expected call of GraphExists.
func (mr *MockDatabaseMockRecorder) GraphExists(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphExists", reflect.TypeOf((*MockDatabase)(nil).GraphExists), ctx, name)
}

// Graphs mocks base method.
func (m *MockDatabase) Graphs(ctx context.Context) (arangodb.GraphsResponseReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Graphs", ctx)
	ret0, _ := ret[0].(arangodb.GraphsResponseReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Graphs indicates an expected call of Graphs.
func (mr *MockDatabaseMockRecorder) Graphs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Graphs", reflect.TypeOf((*MockDatabase)(nil).Graphs), ctx)
}

// Info mocks base method.
func (m *MockDatabase) Info(ctx context.Context) (arangodb.DatabaseInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", ctx)
	ret0, _ := ret[0].(arangodb.DatabaseInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockDatabaseMockRecorder) Info(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockDatabase)(nil).Info), ctx)
}

// ListTransactions mocks base method.
func (m *MockDatabase) ListTransactions(ctx context.Context) ([]arangodb.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", ctx)
	ret0, _ := ret[0].([]arangodb.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockDatabaseMockRecorder) ListTransactions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockDatabase)(nil).ListTransactions), ctx)
}

// ListTransactionsWithStatuses mocks base method.
func (m *MockDatabase) ListTransactionsWithStatuses(ctx context.Context, statuses ...arangodb.TransactionStatus) ([]arangodb.Transaction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range statuses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTransactionsWithStatuses", varargs...)
	ret0, _ := ret[0].([]arangodb.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactionsWithStatuses indicates an expected call of ListTransactionsWithStatuses.
func (mr *MockDatabaseMockRecorder) ListTransactionsWithStatuses(ctx any, statuses ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, statuses...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionsWithStatuses", reflect.TypeOf((*MockDatabase)(nil).ListTransactionsWithStatuses), varargs...)
}

// Name mocks base method.
func (m *MockDatabase) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockDatabaseMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDatabase)(nil).Name))
}

// Query mocks base method.
func (m *MockDatabase) Query(ctx context.Context, query string, opts *arangodb.QueryOptions) (arangodb.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, query, opts)
	ret0, _ := ret[0].(arangodb.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDatabaseMockRecorder) Query(ctx, query, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDatabase)(nil).Query), ctx, query, opts)
}

// QueryBatch mocks base method.
func (m *MockDatabase) QueryBatch(ctx context.Context, query string, opts *arangodb.QueryOptions, result any) (arangodb.CursorBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBatch", ctx, query, opts, result)
	ret0, _ := ret[0].(arangodb.CursorBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBatch indicates an expected call of QueryBatch.
func (mr *MockDatabaseMockRecorder) QueryBatch(ctx, query, opts, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBatch", reflect.TypeOf((*MockDatabase)(nil).QueryBatch), ctx, query, opts, result)
}

// Remove mocks base method.
func (m *MockDatabase) Remove(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockDatabaseMockRecorder) Remove(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockDatabase)(nil).Remove), ctx)
}

// Transaction mocks base method.
func (m *MockDatabase) Transaction(ctx context.Context, id arangodb.TransactionID) (arangodb.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", ctx, id)
	ret0, _ := ret[0].(arangodb.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transaction indicates an expected call of Transaction.
func (mr *MockDatabaseMockRecorder) Transaction(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockDatabase)(nil).Transaction), ctx, id)
}

// TransactionJS mocks base method.
func (m *MockDatabase) TransactionJS(ctx context.Context, options arangodb.TransactionJSOptions) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionJS", ctx, options)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionJS indicates an expected call of TransactionJS.
func (mr *MockDatabaseMockRecorder) TransactionJS(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionJS", reflect.TypeOf((*MockDatabase)(nil).TransactionJS), ctx, options)
}

// ValidateQuery mocks base method.
func (m *MockDatabase) ValidateQuery(ctx context.Context, query string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateQuery", ctx, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateQuery indicates an expected call of ValidateQuery.
func (mr *MockDatabaseMockRecorder) ValidateQuery(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateQuery", reflect.TypeOf((*MockDatabase)(nil).ValidateQuery), ctx, query)
}

// View mocks base method.
func (m *MockDatabase) View(ctx context.Context, name string) (arangodb.View, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "View", ctx, name)
	ret0, _ := ret[0].(arangodb.View)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// View indicates an expected call of View.
func (mr *MockDatabaseMockRecorder) View(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "View", reflect.TypeOf((*MockDatabase)(nil).View), ctx, name)
}

// ViewExists mocks base method.
func (m *MockDatabase) ViewExists(ctx context.Context, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewExists", ctx, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewExists indicates an expected call of ViewExists.
func (mr *MockDatabaseMockRecorder) ViewExists(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewExists", reflect.TypeOf((*MockDatabase)(nil).ViewExists), ctx, name)
}

// Views mocks base method.
func (m *MockDatabase) Views(ctx context.Context) (arangodb.ViewsResponseReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Views", ctx)
	ret0, _ := ret[0].(arangodb.ViewsResponseReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Views indicates an expected call of Views.
func (mr *MockDatabaseMockRecorder) Views(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Views", reflect.TypeOf((*MockDatabase)(nil).Views), ctx)
}

// ViewsAll mocks base method.
func (m *MockDatabase) ViewsAll(ctx context.Context) ([]arangodb.View, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewsAll", ctx)
	ret0, _ := ret[0].([]arangodb.View)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewsAll indicates an expected call of ViewsAll.
func (mr *MockDatabaseMockRecorder) ViewsAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewsAll", reflect.TypeOf((*MockDatabase)(nil).ViewsAll), ctx)
}

// WithTransaction mocks base method.
func (m *MockDatabase) WithTransaction(ctx context.Context, cols arangodb.TransactionCollections, opts *arangodb.BeginTransactionOptions, commitOptions *arangodb.CommitTransactionOptions, abortOptions *arangodb.AbortTransactionOptions, w arangodb.TransactionWrap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", ctx, cols, opts, commitOptions, abortOptions, w)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockDatabaseMockRecorder) WithTransaction(ctx, cols, opts, commitOptions, abortOptions, w any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockDatabase)(nil).WithTransaction), ctx, cols, opts, commitOptions, abortOptions, w)
}

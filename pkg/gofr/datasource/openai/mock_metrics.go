// Code generated by MockGen. DO NOT EDIT.
// Source: metrics.go
//
// Generated by this command:
//
//	mockgen -source=metrics.go -destination=mock_metrics.go -package=openai
//

// Package openai is a generated GoMock package.
package openai

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
	isgomock struct{}
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// NewCounter mocks base method.
func (m *MockMetrics) NewCounter(name, desc string, labels ...string) {
	m.ctrl.T.Helper()
	varargs := []any{name, desc}
	for _, a := range labels {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "NewCounter", varargs...)
}

// NewCounter indicates an expected call of NewCounter.
func (mr *MockMetricsMockRecorder) NewCounter(name, desc any, labels ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name, desc}, labels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCounter", reflect.TypeOf((*MockMetrics)(nil).NewCounter), varargs...)
}

// NewCounterVec mocks base method.
func (m *MockMetrics) NewCounterVec(name, desc string, labels ...string) {
	m.ctrl.T.Helper()
	varargs := []any{name, desc}
	for _, a := range labels {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "NewCounterVec", varargs...)
}

// NewCounterVec indicates an expected call of NewCounterVec.
func (mr *MockMetricsMockRecorder) NewCounterVec(name, desc any, labels ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name, desc}, labels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCounterVec", reflect.TypeOf((*MockMetrics)(nil).NewCounterVec), varargs...)
}

// NewHistogram mocks base method.
func (m *MockMetrics) NewHistogram(name, desc string, buckets ...float64) {
	m.ctrl.T.Helper()
	varargs := []any{name, desc}
	for _, a := range buckets {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "NewHistogram", varargs...)
}

// NewHistogram indicates an expected call of NewHistogram.
func (mr *MockMetricsMockRecorder) NewHistogram(name, desc any, buckets ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name, desc}, buckets...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewHistogram", reflect.TypeOf((*MockMetrics)(nil).NewHistogram), varargs...)
}

// RecordHistogram mocks base method.
func (m *MockMetrics) RecordHistogram(ctx context.Context, name string, value float64, labels ...string) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, value}
	for _, a := range labels {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RecordHistogram", varargs...)
}

// RecordHistogram indicates an expected call of RecordHistogram.
func (mr *MockMetricsMockRecorder) RecordHistogram(ctx, name, value any, labels ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, value}, labels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHistogram", reflect.TypeOf((*MockMetrics)(nil).RecordHistogram), varargs...)
}

// RecordRequestCount mocks base method.
func (m *MockMetrics) RecordRequestCount(ctx context.Context, name string, labels ...string) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name}
	for _, a := range labels {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RecordRequestCount", varargs...)
}

// RecordRequestCount indicates an expected call of RecordRequestCount.
func (mr *MockMetricsMockRecorder) RecordRequestCount(ctx, name any, labels ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name}, labels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRequestCount", reflect.TypeOf((*MockMetrics)(nil).RecordRequestCount), varargs...)
}

// RecordTokenUsage mocks base method.
func (m *MockMetrics) RecordTokenUsage(ctx context.Context, name string, promptTokens, completionTokens int, labels ...string) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, promptTokens, completionTokens}
	for _, a := range labels {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RecordTokenUsage", varargs...)
}

// RecordTokenUsage indicates an expected call of RecordTokenUsage.
func (mr *MockMetricsMockRecorder) RecordTokenUsage(ctx, name, promptTokens, completionTokens any, labels ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, promptTokens, completionTokens}, labels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTokenUsage", reflect.TypeOf((*MockMetrics)(nil).RecordTokenUsage), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package influxdb_mock is a generated GoMock package.
package influxdb_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	influxdb2 "github.com/influxdata/influxdb-client-go/v2"
	api "github.com/influxdata/influxdb-client-go/v2/api"
	domain "github.com/influxdata/influxdb-client-go/v2/domain"
)

// Mockclient is a mock of client interface.
type Mockclient struct {
	ctrl     *gomock.Controller
	recorder *MockclientMockRecorder
}

// MockclientMockRecorder is the mock recorder for Mockclient.
type MockclientMockRecorder struct {
	mock *Mockclient
}

// NewMockclient creates a new mock instance.
func NewMockclient(ctrl *gomock.Controller) *Mockclient {
	mock := &Mockclient{ctrl: ctrl}
	mock.recorder = &MockclientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockclient) EXPECT() *MockclientMockRecorder {
	return m.recorder
}

// AuthorizationsAPI mocks base method.
func (m *Mockclient) AuthorizationsAPI() api.AuthorizationsAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizationsAPI")
	ret0, _ := ret[0].(api.AuthorizationsAPI)
	return ret0
}

// AuthorizationsAPI indicates an expected call of AuthorizationsAPI.
func (mr *MockclientMockRecorder) AuthorizationsAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizationsAPI", reflect.TypeOf((*Mockclient)(nil).AuthorizationsAPI))
}

// BucketsAPI mocks base method.
func (m *Mockclient) BucketsAPI() api.BucketsAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketsAPI")
	ret0, _ := ret[0].(api.BucketsAPI)
	return ret0
}

// BucketsAPI indicates an expected call of BucketsAPI.
func (mr *MockclientMockRecorder) BucketsAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketsAPI", reflect.TypeOf((*Mockclient)(nil).BucketsAPI))
}

// DeleteAPI mocks base method.
func (m *Mockclient) DeleteAPI() api.DeleteAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPI")
	ret0, _ := ret[0].(api.DeleteAPI)
	return ret0
}

// DeleteAPI indicates an expected call of DeleteAPI.
func (mr *MockclientMockRecorder) DeleteAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPI", reflect.TypeOf((*Mockclient)(nil).DeleteAPI))
}

// Health mocks base method.
func (m *Mockclient) Health(ctx context.Context) (*domain.HealthCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", ctx)
	ret0, _ := ret[0].(*domain.HealthCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health.
func (mr *MockclientMockRecorder) Health(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*Mockclient)(nil).Health), ctx)
}

// Options mocks base method.
func (m *Mockclient) Options() *influxdb2.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options")
	ret0, _ := ret[0].(*influxdb2.Options)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockclientMockRecorder) Options() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*Mockclient)(nil).Options))
}

// OrganizationsAPI mocks base method.
func (m *Mockclient) OrganizationsAPI() api.OrganizationsAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationsAPI")
	ret0, _ := ret[0].(api.OrganizationsAPI)
	return ret0
}

// OrganizationsAPI indicates an expected call of OrganizationsAPI.
func (mr *MockclientMockRecorder) OrganizationsAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationsAPI", reflect.TypeOf((*Mockclient)(nil).OrganizationsAPI))
}

// Ping mocks base method.
func (m *Mockclient) Ping(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockclientMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*Mockclient)(nil).Ping), ctx)
}

// QueryAPI mocks base method.
func (m *Mockclient) QueryAPI(org string) api.QueryAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAPI", org)
	ret0, _ := ret[0].(api.QueryAPI)
	return ret0
}

// QueryAPI indicates an expected call of QueryAPI.
func (mr *MockclientMockRecorder) QueryAPI(org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAPI", reflect.TypeOf((*Mockclient)(nil).QueryAPI), org)
}

// Setup mocks base method.
func (m *Mockclient) Setup(ctx context.Context, username, password, org, bucket string, retentionPeriodHours int) (*domain.OnboardingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", ctx, username, password, org, bucket, retentionPeriodHours)
	ret0, _ := ret[0].(*domain.OnboardingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Setup indicates an expected call of Setup.
func (mr *MockclientMockRecorder) Setup(ctx, username, password, org, bucket, retentionPeriodHours interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*Mockclient)(nil).Setup), ctx, username, password, org, bucket, retentionPeriodHours)
}

// WriteAPIBlocking mocks base method.
func (m *Mockclient) WriteAPIBlocking(org, bucket string) api.WriteAPIBlocking {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAPIBlocking", org, bucket)
	ret0, _ := ret[0].(api.WriteAPIBlocking)
	return ret0
}

// WriteAPIBlocking indicates an expected call of WriteAPIBlocking.
func (mr *MockclientMockRecorder) WriteAPIBlocking(org, bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAPIBlocking", reflect.TypeOf((*Mockclient)(nil).WriteAPIBlocking), org, bucket)
}

// Mockorganization is a mock of organization interface.
type Mockorganization struct {
	ctrl     *gomock.Controller
	recorder *MockorganizationMockRecorder
}

// MockorganizationMockRecorder is the mock recorder for Mockorganization.
type MockorganizationMockRecorder struct {
	mock *Mockorganization
}

// NewMockorganization creates a new mock instance.
func NewMockorganization(ctrl *gomock.Controller) *Mockorganization {
	mock := &Mockorganization{ctrl: ctrl}
	mock.recorder = &MockorganizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockorganization) EXPECT() *MockorganizationMockRecorder {
	return m.recorder
}

// CreateOrganizationWithName mocks base method.
func (m *Mockorganization) CreateOrganizationWithName(ctx context.Context, orgName string) (*domain.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationWithName", ctx, orgName)
	ret0, _ := ret[0].(*domain.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganizationWithName indicates an expected call of CreateOrganizationWithName.
func (mr *MockorganizationMockRecorder) CreateOrganizationWithName(ctx, orgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationWithName", reflect.TypeOf((*Mockorganization)(nil).CreateOrganizationWithName), ctx, orgName)
}

// DeleteOrganizationWithID mocks base method.
func (m *Mockorganization) DeleteOrganizationWithID(ctx context.Context, orgID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganizationWithID", ctx, orgID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganizationWithID indicates an expected call of DeleteOrganizationWithID.
func (mr *MockorganizationMockRecorder) DeleteOrganizationWithID(ctx, orgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizationWithID", reflect.TypeOf((*Mockorganization)(nil).DeleteOrganizationWithID), ctx, orgID)
}

// FindOrganizationByName mocks base method.
func (m *Mockorganization) FindOrganizationByName(ctx context.Context, orgName string) (*domain.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrganizationByName", ctx, orgName)
	ret0, _ := ret[0].(*domain.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrganizationByName indicates an expected call of FindOrganizationByName.
func (mr *MockorganizationMockRecorder) FindOrganizationByName(ctx, orgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrganizationByName", reflect.TypeOf((*Mockorganization)(nil).FindOrganizationByName), ctx, orgName)
}

// GetOrganizations mocks base method.
func (m *Mockorganization) GetOrganizations(ctx context.Context, pagingOptions ...api.PagingOption) (*[]domain.Organization, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range pagingOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrganizations", varargs...)
	ret0, _ := ret[0].(*[]domain.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizations indicates an expected call of GetOrganizations.
func (mr *MockorganizationMockRecorder) GetOrganizations(ctx interface{}, pagingOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, pagingOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizations", reflect.TypeOf((*Mockorganization)(nil).GetOrganizations), varargs...)
}

// Mockbucket is a mock of bucket interface.
type Mockbucket struct {
	ctrl     *gomock.Controller
	recorder *MockbucketMockRecorder
}

// MockbucketMockRecorder is the mock recorder for Mockbucket.
type MockbucketMockRecorder struct {
	mock *Mockbucket
}

// NewMockbucket creates a new mock instance.
func NewMockbucket(ctrl *gomock.Controller) *Mockbucket {
	mock := &Mockbucket{ctrl: ctrl}
	mock.recorder = &MockbucketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockbucket) EXPECT() *MockbucketMockRecorder {
	return m.recorder
}

// CreateBucket mocks base method.
func (m *Mockbucket) CreateBucket(ctx context.Context, bucket *domain.Bucket) (*domain.Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucket", ctx, bucket)
	ret0, _ := ret[0].(*domain.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBucket indicates an expected call of CreateBucket.
func (mr *MockbucketMockRecorder) CreateBucket(ctx, bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucket", reflect.TypeOf((*Mockbucket)(nil).CreateBucket), ctx, bucket)
}

// CreateBucketWithName mocks base method.
func (m *Mockbucket) CreateBucketWithName(ctx context.Context, org *domain.Organization, bucketName string, rules ...domain.RetentionRule) (*domain.Bucket, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, org, bucketName}
	for _, a := range rules {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBucketWithName", varargs...)
	ret0, _ := ret[0].(*domain.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBucketWithName indicates an expected call of CreateBucketWithName.
func (mr *MockbucketMockRecorder) CreateBucketWithName(ctx, org, bucketName interface{}, rules ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, org, bucketName}, rules...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucketWithName", reflect.TypeOf((*Mockbucket)(nil).CreateBucketWithName), varargs...)
}

// CreateBucketWithNameWithID mocks base method.
func (m *Mockbucket) CreateBucketWithNameWithID(ctx context.Context, orgID, bucketName string, rules ...domain.RetentionRule) (*domain.Bucket, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, orgID, bucketName}
	for _, a := range rules {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBucketWithNameWithID", varargs...)
	ret0, _ := ret[0].(*domain.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBucketWithNameWithID indicates an expected call of CreateBucketWithNameWithID.
func (mr *MockbucketMockRecorder) CreateBucketWithNameWithID(ctx, orgID, bucketName interface{}, rules ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, orgID, bucketName}, rules...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucketWithNameWithID", reflect.TypeOf((*Mockbucket)(nil).CreateBucketWithNameWithID), varargs...)
}

// DeleteBucketWithID mocks base method.
func (m *Mockbucket) DeleteBucketWithID(ctx context.Context, bucketID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketWithID", ctx, bucketID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBucketWithID indicates an expected call of DeleteBucketWithID.
func (mr *MockbucketMockRecorder) DeleteBucketWithID(ctx, bucketID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketWithID", reflect.TypeOf((*Mockbucket)(nil).DeleteBucketWithID), ctx, bucketID)
}

// FindBucketByID mocks base method.
func (m *Mockbucket) FindBucketByID(ctx context.Context, bucketID string) (*domain.Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBucketByID", ctx, bucketID)
	ret0, _ := ret[0].(*domain.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBucketByID indicates an expected call of FindBucketByID.
func (mr *MockbucketMockRecorder) FindBucketByID(ctx, bucketID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBucketByID", reflect.TypeOf((*Mockbucket)(nil).FindBucketByID), ctx, bucketID)
}

// FindBucketByName mocks base method.
func (m *Mockbucket) FindBucketByName(ctx context.Context, bucketName string) (*domain.Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBucketByName", ctx, bucketName)
	ret0, _ := ret[0].(*domain.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBucketByName indicates an expected call of FindBucketByName.
func (mr *MockbucketMockRecorder) FindBucketByName(ctx, bucketName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBucketByName", reflect.TypeOf((*Mockbucket)(nil).FindBucketByName), ctx, bucketName)
}

// GetBuckets mocks base method.
func (m *Mockbucket) GetBuckets(ctx context.Context, pagingOptions ...api.PagingOption) (*[]domain.Bucket, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range pagingOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBuckets", varargs...)
	ret0, _ := ret[0].(*[]domain.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuckets indicates an expected call of GetBuckets.
func (mr *MockbucketMockRecorder) GetBuckets(ctx interface{}, pagingOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, pagingOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuckets", reflect.TypeOf((*Mockbucket)(nil).GetBuckets), varargs...)
}

// UpdateBucket mocks base method.
func (m *Mockbucket) UpdateBucket(ctx context.Context, bucket *domain.Bucket) (*domain.Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBucket", ctx, bucket)
	ret0, _ := ret[0].(*domain.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBucket indicates an expected call of UpdateBucket.
func (mr *MockbucketMockRecorder) UpdateBucket(ctx, bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBucket", reflect.TypeOf((*Mockbucket)(nil).UpdateBucket), ctx, bucket)
}

// Mockquery is a mock of query interface.
type Mockquery struct {
	ctrl     *gomock.Controller
	recorder *MockqueryMockRecorder
}

// MockqueryMockRecorder is the mock recorder for Mockquery.
type MockqueryMockRecorder struct {
	mock *Mockquery
}

// NewMockquery creates a new mock instance.
func NewMockquery(ctrl *gomock.Controller) *Mockquery {
	mock := &Mockquery{ctrl: ctrl}
	mock.recorder = &MockqueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockquery) EXPECT() *MockqueryMockRecorder {
	return m.recorder
}

// Query mocks base method.
func (m *Mockquery) Query(ctx context.Context, query string) (*api.QueryTableResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, query)
	ret0, _ := ret[0].(*api.QueryTableResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockqueryMockRecorder) Query(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*Mockquery)(nil).Query), ctx, query)
}

// QueryRaw mocks base method.
func (m *Mockquery) QueryRaw(ctx context.Context, query string, dialect *domain.Dialect) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRaw", ctx, query, dialect)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRaw indicates an expected call of QueryRaw.
func (mr *MockqueryMockRecorder) QueryRaw(ctx, query, dialect interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRaw", reflect.TypeOf((*Mockquery)(nil).QueryRaw), ctx, query, dialect)
}

// QueryRawWithParams mocks base method.
func (m *Mockquery) QueryRawWithParams(ctx context.Context, query string, dialect *domain.Dialect, params any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRawWithParams", ctx, query, dialect, params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRawWithParams indicates an expected call of QueryRawWithParams.
func (mr *MockqueryMockRecorder) QueryRawWithParams(ctx, query, dialect, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRawWithParams", reflect.TypeOf((*Mockquery)(nil).QueryRawWithParams), ctx, query, dialect, params)
}

// QueryWithParams mocks base method.
func (m *Mockquery) QueryWithParams(ctx context.Context, query string, params any) (*api.QueryTableResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryWithParams", ctx, query, params)
	ret0, _ := ret[0].(*api.QueryTableResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryWithParams indicates an expected call of QueryWithParams.
func (mr *MockqueryMockRecorder) QueryWithParams(ctx, query, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryWithParams", reflect.TypeOf((*Mockquery)(nil).QueryWithParams), ctx, query, params)
}

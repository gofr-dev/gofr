// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package influxdb is a generated GoMock package.
package influxdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	influxdb2 "github.com/influxdata/influxdb-client-go/v2"
	api "github.com/influxdata/influxdb-client-go/v2/api"
	http "github.com/influxdata/influxdb-client-go/v2/api/http"
	domain "github.com/influxdata/influxdb-client-go/v2/domain"
)

// MockInfluxClient is a mock of InfluxClient interface.
type MockInfluxClient struct {
	ctrl     *gomock.Controller
	recorder *MockInfluxClientMockRecorder
}

// MockInfluxClientMockRecorder is the mock recorder for MockInfluxClient.
type MockInfluxClientMockRecorder struct {
	mock *MockInfluxClient
}

// NewMockInfluxClient creates a new mock instance.
func NewMockInfluxClient(ctrl *gomock.Controller) *MockInfluxClient {
	mock := &MockInfluxClient{ctrl: ctrl}
	mock.recorder = &MockInfluxClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfluxClient) EXPECT() *MockInfluxClientMockRecorder {
	return m.recorder
}

// APIClient mocks base method.
func (m *MockInfluxClient) APIClient() *domain.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIClient")
	ret0, _ := ret[0].(*domain.Client)
	return ret0
}

// APIClient indicates an expected call of APIClient.
func (mr *MockInfluxClientMockRecorder) APIClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIClient", reflect.TypeOf((*MockInfluxClient)(nil).APIClient))
}

// AuthorizationsAPI mocks base method.
func (m *MockInfluxClient) AuthorizationsAPI() api.AuthorizationsAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizationsAPI")
	ret0, _ := ret[0].(api.AuthorizationsAPI)
	return ret0
}

// AuthorizationsAPI indicates an expected call of AuthorizationsAPI.
func (mr *MockInfluxClientMockRecorder) AuthorizationsAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizationsAPI", reflect.TypeOf((*MockInfluxClient)(nil).AuthorizationsAPI))
}

// BucketsAPI mocks base method.
func (m *MockInfluxClient) BucketsAPI() api.BucketsAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketsAPI")
	ret0, _ := ret[0].(api.BucketsAPI)
	return ret0
}

// BucketsAPI indicates an expected call of BucketsAPI.
func (mr *MockInfluxClientMockRecorder) BucketsAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketsAPI", reflect.TypeOf((*MockInfluxClient)(nil).BucketsAPI))
}

// Close mocks base method.
func (m *MockInfluxClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockInfluxClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockInfluxClient)(nil).Close))
}

// DeleteAPI mocks base method.
func (m *MockInfluxClient) DeleteAPI() api.DeleteAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPI")
	ret0, _ := ret[0].(api.DeleteAPI)
	return ret0
}

// DeleteAPI indicates an expected call of DeleteAPI.
func (mr *MockInfluxClientMockRecorder) DeleteAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPI", reflect.TypeOf((*MockInfluxClient)(nil).DeleteAPI))
}

// HTTPService mocks base method.
func (m *MockInfluxClient) HTTPService() http.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPService")
	ret0, _ := ret[0].(http.Service)
	return ret0
}

// HTTPService indicates an expected call of HTTPService.
func (mr *MockInfluxClientMockRecorder) HTTPService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPService", reflect.TypeOf((*MockInfluxClient)(nil).HTTPService))
}

// Health mocks base method.
func (m *MockInfluxClient) Health(ctx context.Context) (*domain.HealthCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", ctx)
	ret0, _ := ret[0].(*domain.HealthCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health.
func (mr *MockInfluxClientMockRecorder) Health(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockInfluxClient)(nil).Health), ctx)
}

// LabelsAPI mocks base method.
func (m *MockInfluxClient) LabelsAPI() api.LabelsAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelsAPI")
	ret0, _ := ret[0].(api.LabelsAPI)
	return ret0
}

// LabelsAPI indicates an expected call of LabelsAPI.
func (mr *MockInfluxClientMockRecorder) LabelsAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelsAPI", reflect.TypeOf((*MockInfluxClient)(nil).LabelsAPI))
}

// Options mocks base method.
func (m *MockInfluxClient) Options() *influxdb2.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options")
	ret0, _ := ret[0].(*influxdb2.Options)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockInfluxClientMockRecorder) Options() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockInfluxClient)(nil).Options))
}

// OrganizationsAPI mocks base method.
func (m *MockInfluxClient) OrganizationsAPI() api.OrganizationsAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationsAPI")
	ret0, _ := ret[0].(api.OrganizationsAPI)
	return ret0
}

// OrganizationsAPI indicates an expected call of OrganizationsAPI.
func (mr *MockInfluxClientMockRecorder) OrganizationsAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationsAPI", reflect.TypeOf((*MockInfluxClient)(nil).OrganizationsAPI))
}

// Ping mocks base method.
func (m *MockInfluxClient) Ping(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockInfluxClientMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockInfluxClient)(nil).Ping), ctx)
}

// QueryAPI mocks base method.
func (m *MockInfluxClient) QueryAPI(org string) api.QueryAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAPI", org)
	ret0, _ := ret[0].(api.QueryAPI)
	return ret0
}

// QueryAPI indicates an expected call of QueryAPI.
func (mr *MockInfluxClientMockRecorder) QueryAPI(org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAPI", reflect.TypeOf((*MockInfluxClient)(nil).QueryAPI), org)
}

// Ready mocks base method.
func (m *MockInfluxClient) Ready(ctx context.Context) (*domain.Ready, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready", ctx)
	ret0, _ := ret[0].(*domain.Ready)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ready indicates an expected call of Ready.
func (mr *MockInfluxClientMockRecorder) Ready(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockInfluxClient)(nil).Ready), ctx)
}

// ServerURL mocks base method.
func (m *MockInfluxClient) ServerURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServerURL indicates an expected call of ServerURL.
func (mr *MockInfluxClientMockRecorder) ServerURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerURL", reflect.TypeOf((*MockInfluxClient)(nil).ServerURL))
}

// Setup mocks base method.
func (m *MockInfluxClient) Setup(ctx context.Context, username, password, org, bucket string, retentionPeriodHours int) (*domain.OnboardingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", ctx, username, password, org, bucket, retentionPeriodHours)
	ret0, _ := ret[0].(*domain.OnboardingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Setup indicates an expected call of Setup.
func (mr *MockInfluxClientMockRecorder) Setup(ctx, username, password, org, bucket, retentionPeriodHours interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockInfluxClient)(nil).Setup), ctx, username, password, org, bucket, retentionPeriodHours)
}

// SetupWithToken mocks base method.
func (m *MockInfluxClient) SetupWithToken(ctx context.Context, username, password, org, bucket string, retentionPeriodHours int, token string) (*domain.OnboardingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupWithToken", ctx, username, password, org, bucket, retentionPeriodHours, token)
	ret0, _ := ret[0].(*domain.OnboardingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupWithToken indicates an expected call of SetupWithToken.
func (mr *MockInfluxClientMockRecorder) SetupWithToken(ctx, username, password, org, bucket, retentionPeriodHours, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupWithToken", reflect.TypeOf((*MockInfluxClient)(nil).SetupWithToken), ctx, username, password, org, bucket, retentionPeriodHours, token)
}

// TasksAPI mocks base method.
func (m *MockInfluxClient) TasksAPI() api.TasksAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TasksAPI")
	ret0, _ := ret[0].(api.TasksAPI)
	return ret0
}

// TasksAPI indicates an expected call of TasksAPI.
func (mr *MockInfluxClientMockRecorder) TasksAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TasksAPI", reflect.TypeOf((*MockInfluxClient)(nil).TasksAPI))
}

// UsersAPI mocks base method.
func (m *MockInfluxClient) UsersAPI() api.UsersAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPI")
	ret0, _ := ret[0].(api.UsersAPI)
	return ret0
}

// UsersAPI indicates an expected call of UsersAPI.
func (mr *MockInfluxClientMockRecorder) UsersAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPI", reflect.TypeOf((*MockInfluxClient)(nil).UsersAPI))
}

// WriteAPI mocks base method.
func (m *MockInfluxClient) WriteAPI(org, bucket string) api.WriteAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAPI", org, bucket)
	ret0, _ := ret[0].(api.WriteAPI)
	return ret0
}

// WriteAPI indicates an expected call of WriteAPI.
func (mr *MockInfluxClientMockRecorder) WriteAPI(org, bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAPI", reflect.TypeOf((*MockInfluxClient)(nil).WriteAPI), org, bucket)
}

// WriteAPIBlocking mocks base method.
func (m *MockInfluxClient) WriteAPIBlocking(org, bucket string) api.WriteAPIBlocking {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAPIBlocking", org, bucket)
	ret0, _ := ret[0].(api.WriteAPIBlocking)
	return ret0
}

// WriteAPIBlocking indicates an expected call of WriteAPIBlocking.
func (mr *MockInfluxClientMockRecorder) WriteAPIBlocking(org, bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAPIBlocking", reflect.TypeOf((*MockInfluxClient)(nil).WriteAPIBlocking), org, bucket)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: file.go
//
// Generated by this command:
//
//	mockgen -source=file.go -destination=mock_response.go -package=ftp ftpResponse
//

// Package ftp is a generated GoMock package.
package ftp

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockftpResponse is a mock of ftpResponse interface.
type MockftpResponse struct {
	ctrl     *gomock.Controller
	recorder *MockftpResponseMockRecorder
}

// MockftpResponseMockRecorder is the mock recorder for MockftpResponse.
type MockftpResponseMockRecorder struct {
	mock *MockftpResponse
}

// NewMockftpResponse creates a new mock instance.
func NewMockftpResponse(ctrl *gomock.Controller) *MockftpResponse {
	mock := &MockftpResponse{ctrl: ctrl}
	mock.recorder = &MockftpResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockftpResponse) EXPECT() *MockftpResponseMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockftpResponse) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockftpResponseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockftpResponse)(nil).Close))
}

// Read mocks base method.
func (m *MockftpResponse) Read(buf []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", buf)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockftpResponseMockRecorder) Read(buf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockftpResponse)(nil).Read), buf)
}

// SetDeadline mocks base method.
func (m *MockftpResponse) SetDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline.
func (mr *MockftpResponseMockRecorder) SetDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockftpResponse)(nil).SetDeadline), t)
}

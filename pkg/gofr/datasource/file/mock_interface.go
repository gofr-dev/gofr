// Code generated by MockGen. DO NOT EDIT.
// Source: gofr.dev/pkg/gofr/datasource/file (interfaces: FileSystemProvider)
//
// Generated by this command:
//
//	mockgen -package file -destination mock_interface.go gofr.dev/pkg/gofr/datasource/file FileSystemProvider
//

// Package file is a generated GoMock package.
package file

import (
	fs "io/fs"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileSystemProvider is a mock of FileSystemProvider interface.
type MockFileSystemProvider struct {
	ctrl     *gomock.Controller
	recorder *MockFileSystemProviderMockRecorder
}

// MockFileSystemProviderMockRecorder is the mock recorder for MockFileSystemProvider.
type MockFileSystemProviderMockRecorder struct {
	mock *MockFileSystemProvider
}

// NewMockFileSystemProvider creates a new mock instance.
func NewMockFileSystemProvider(ctrl *gomock.Controller) *MockFileSystemProvider {
	mock := &MockFileSystemProvider{ctrl: ctrl}
	mock.recorder = &MockFileSystemProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSystemProvider) EXPECT() *MockFileSystemProviderMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockFileSystemProvider) Connect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connect")
}

// Connect indicates an expected call of Connect.
func (mr *MockFileSystemProviderMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockFileSystemProvider)(nil).Connect))
}

// Create mocks base method.
func (m *MockFileSystemProvider) Create(arg0 string) (File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFileSystemProviderMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileSystemProvider)(nil).Create), arg0)
}

// Mkdir mocks base method.
func (m *MockFileSystemProvider) Mkdir(arg0 string, arg1 fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mkdir", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mkdir indicates an expected call of Mkdir.
func (mr *MockFileSystemProviderMockRecorder) Mkdir(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mkdir", reflect.TypeOf((*MockFileSystemProvider)(nil).Mkdir), arg0, arg1)
}

// MkdirAll mocks base method.
func (m *MockFileSystemProvider) MkdirAll(arg0 string, arg1 fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll.
func (mr *MockFileSystemProviderMockRecorder) MkdirAll(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockFileSystemProvider)(nil).MkdirAll), arg0, arg1)
}

// Open mocks base method.
func (m *MockFileSystemProvider) Open(arg0 string) (File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockFileSystemProviderMockRecorder) Open(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockFileSystemProvider)(nil).Open), arg0)
}

// OpenFile mocks base method.
func (m *MockFileSystemProvider) OpenFile(arg0 string, arg1 int, arg2 fs.FileMode) (File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockFileSystemProviderMockRecorder) OpenFile(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockFileSystemProvider)(nil).OpenFile), arg0, arg1, arg2)
}

// Remove mocks base method.
func (m *MockFileSystemProvider) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockFileSystemProviderMockRecorder) Remove(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockFileSystemProvider)(nil).Remove), arg0)
}

// RemoveAll mocks base method.
func (m *MockFileSystemProvider) RemoveAll(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockFileSystemProviderMockRecorder) RemoveAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockFileSystemProvider)(nil).RemoveAll), arg0)
}

// Rename mocks base method.
func (m *MockFileSystemProvider) Rename(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rename indicates an expected call of Rename.
func (mr *MockFileSystemProviderMockRecorder) Rename(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockFileSystemProvider)(nil).Rename), arg0, arg1)
}

// UseLogger mocks base method.
func (m *MockFileSystemProvider) UseLogger(arg0 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseLogger", arg0)
}

// UseLogger indicates an expected call of UseLogger.
func (mr *MockFileSystemProviderMockRecorder) UseLogger(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseLogger", reflect.TypeOf((*MockFileSystemProvider)(nil).UseLogger), arg0)
}

// UseMetrics mocks base method.
func (m *MockFileSystemProvider) UseMetrics(arg0 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseMetrics", arg0)
}

// UseMetrics indicates an expected call of UseMetrics.
func (mr *MockFileSystemProviderMockRecorder) UseMetrics(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseMetrics", reflect.TypeOf((*MockFileSystemProvider)(nil).UseMetrics), arg0)
}

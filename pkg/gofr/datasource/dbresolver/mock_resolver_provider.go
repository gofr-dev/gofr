// Code generated by MockGen. DO NOT EDIT.
// Source: gofr.dev/pkg/gofr/container (interfaces: DBResolverProvider)
//
// Generated by this command:
//
//	mockgen -package=dbresolver -destination=mock_resolver_provider.go gofr.dev/pkg/gofr/container DBResolverProvider
//

// Package dbresolver is a generated GoMock package.
package dbresolver

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	container "gofr.dev/pkg/gofr/container"
)

// MockDBResolverProvider is a mock of DBResolverProvider interface.
type MockDBResolverProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDBResolverProviderMockRecorder
	isgomock struct{}
}

// MockDBResolverProviderMockRecorder is the mock recorder for MockDBResolverProvider.
type MockDBResolverProviderMockRecorder struct {
	mock *MockDBResolverProvider
}

// NewMockDBResolverProvider creates a new mock instance.
func NewMockDBResolverProvider(ctrl *gomock.Controller) *MockDBResolverProvider {
	mock := &MockDBResolverProvider{ctrl: ctrl}
	mock.recorder = &MockDBResolverProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBResolverProvider) EXPECT() *MockDBResolverProviderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockDBResolverProvider) Build(primary container.DB, replicas []container.DB) (container.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", primary, replicas)
	ret0, _ := ret[0].(container.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockDBResolverProviderMockRecorder) Build(primary, replicas any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockDBResolverProvider)(nil).Build), primary, replicas)
}

// Connect mocks base method.
func (m *MockDBResolverProvider) Connect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connect")
}

// Connect indicates an expected call of Connect.
func (mr *MockDBResolverProviderMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDBResolverProvider)(nil).Connect))
}

// UseLogger mocks base method.
func (m *MockDBResolverProvider) UseLogger(logger any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseLogger", logger)
}

// UseLogger indicates an expected call of UseLogger.
func (mr *MockDBResolverProviderMockRecorder) UseLogger(logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseLogger", reflect.TypeOf((*MockDBResolverProvider)(nil).UseLogger), logger)
}

// UseMetrics mocks base method.
func (m *MockDBResolverProvider) UseMetrics(metrics any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseMetrics", metrics)
}

// UseMetrics indicates an expected call of UseMetrics.
func (mr *MockDBResolverProviderMockRecorder) UseMetrics(metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseMetrics", reflect.TypeOf((*MockDBResolverProvider)(nil).UseMetrics), metrics)
}

// UseTracer mocks base method.
func (m *MockDBResolverProvider) UseTracer(tracer any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseTracer", tracer)
}

// UseTracer indicates an expected call of UseTracer.
func (mr *MockDBResolverProviderMockRecorder) UseTracer(tracer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseTracer", reflect.TypeOf((*MockDBResolverProvider)(nil).UseTracer), tracer)
}

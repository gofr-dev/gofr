// Code generated by MockGen. DO NOT EDIT.
// Source: logger.go

package oracle

import (
    reflect "reflect"
    gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
    ctrl     *gomock.Controller
    recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
    mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
    mock := &MockLogger{ctrl: ctrl}
    mock.recorder = &MockLoggerMockRecorder{mock}
    return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
    return m.recorder
}

func (m *MockLogger) Debug(args ...any) {
    m.ctrl.T.Helper()
    m.ctrl.Call(m, "Debug", args...)
}

func (mr *MockLoggerMockRecorder) Debug(args ...any) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), args...)
}

func (m *MockLogger) Debugf(pattern string, args ...any) {
    m.ctrl.T.Helper()
    varargs := []any{pattern}
    for _, a := range args {
        varargs = append(varargs, a)
    }
    m.ctrl.Call(m, "Debugf", varargs...)
}

func (mr *MockLoggerMockRecorder) Debugf(pattern any, args ...any) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    varargs := append([]any{pattern}, args...)
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

func (m *MockLogger) Errorf(pattern string, args ...any) {
    m.ctrl.T.Helper()
    varargs := []any{pattern}
    for _, a := range args {
        varargs = append(varargs, a)
    }
    m.ctrl.Call(m, "Errorf", varargs...)
}

func (mr *MockLoggerMockRecorder) Errorf(pattern any, args ...any) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    varargs := append([]any{pattern}, args...)
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}

func (m *MockLogger) Logf(pattern string, args ...any) {
    m.ctrl.T.Helper()
    varargs := []any{pattern}
    for _, a := range args {
        varargs = append(varargs, a)
    }
    m.ctrl.Call(m, "Logf", varargs...)
}

func (mr *MockLoggerMockRecorder) Logf(pattern any, args ...any) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    varargs := append([]any{pattern}, args...)
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logf", reflect.TypeOf((*MockLogger)(nil).Logf), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_interface.go -package=oracle
//

// Package oracle is a generated GoMock package.
package oracle

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOracleConnection is a mock of OracleConnection interface.
type MockOracleConnection struct {
	ctrl     *gomock.Controller
	recorder *MockOracleConnectionMockRecorder
	isgomock struct{}
}

// MockOracleConnectionMockRecorder is the mock recorder for MockOracleConnection.
type MockOracleConnectionMockRecorder struct {
	mock *MockOracleConnection
}

// NewMockOracleConnection creates a new mock instance.
func NewMockOracleConnection(ctrl *gomock.Controller) *MockOracleConnection {
	mock := &MockOracleConnection{ctrl: ctrl}
	mock.recorder = &MockOracleConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOracleConnection) EXPECT() *MockOracleConnectionMockRecorder {
	return m.recorder
}

// AsyncInsert mocks base method.
func (m *MockOracleConnection) AsyncInsert(ctx context.Context, query string, wait bool, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query, wait}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AsyncInsert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AsyncInsert indicates an expected call of AsyncInsert.
func (mr *MockOracleConnectionMockRecorder) AsyncInsert(ctx, query, wait any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query, wait}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncInsert", reflect.TypeOf((*MockOracleConnection)(nil).AsyncInsert), varargs...)
}

// Exec mocks base method.
func (m *MockOracleConnection) Exec(ctx context.Context, query string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockOracleConnectionMockRecorder) Exec(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockOracleConnection)(nil).Exec), varargs...)
}

// Ping mocks base method.
func (m *MockOracleConnection) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockOracleConnectionMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockOracleConnection)(nil).Ping), ctx)
}

// Select mocks base method.
func (m *MockOracleConnection) Select(ctx context.Context, dest any, query string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockOracleConnectionMockRecorder) Select(ctx, dest, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockOracleConnection)(nil).Select), varargs...)
}

// Stats mocks base method.
func (m *MockOracleConnection) Stats() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(any)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockOracleConnectionMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockOracleConnection)(nil).Stats))
}

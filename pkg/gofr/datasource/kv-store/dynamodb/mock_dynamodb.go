// Code generated by MockGen. DO NOT EDIT.
// Source: dynamo.go
//
// Generated by this command:
//
//	mockgen -source dynamo.go -destination=mock_dynamodb.go -package=dynamo
//

// Package dynamo is a generated GoMock package.
package dynamodb

import (
	context "context"
	reflect "reflect"

	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	gomock "go.uber.org/mock/gomock"
)

// MockdynamoDBInterface is a mock of dynamoDBInterface interface.
type MockdynamoDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockdynamoDBInterfaceMockRecorder
	isgomock struct{}
}

// MockdynamoDBInterfaceMockRecorder is the mock recorder for MockdynamoDBInterface.
type MockdynamoDBInterfaceMockRecorder struct {
	mock *MockdynamoDBInterface
}

// NewMockdynamoDBInterface creates a new mock instance.
func NewMockdynamoDBInterface(ctrl *gomock.Controller) *MockdynamoDBInterface {
	mock := &MockdynamoDBInterface{ctrl: ctrl}
	mock.recorder = &MockdynamoDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdynamoDBInterface) EXPECT() *MockdynamoDBInterfaceMockRecorder {
	return m.recorder
}

// DeleteItem mocks base method.
func (m *MockdynamoDBInterface) DeleteItem(ctx context.Context, params *dynamodb.DeleteItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.DeleteItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteItem", varargs...)
	ret0, _ := ret[0].(*dynamodb.DeleteItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockdynamoDBInterfaceMockRecorder) DeleteItem(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockdynamoDBInterface)(nil).DeleteItem), varargs...)
}

// DescribeTable mocks base method.
func (m *MockdynamoDBInterface) DescribeTable(ctx context.Context, params *dynamodb.DescribeTableInput, optFns ...func(*dynamodb.Options)) (*dynamodb.DescribeTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTable", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTable indicates an expected call of DescribeTable.
func (mr *MockdynamoDBInterfaceMockRecorder) DescribeTable(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTable", reflect.TypeOf((*MockdynamoDBInterface)(nil).DescribeTable), varargs...)
}

// GetItem mocks base method.
func (m *MockdynamoDBInterface) GetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItem", varargs...)
	ret0, _ := ret[0].(*dynamodb.GetItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockdynamoDBInterfaceMockRecorder) GetItem(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockdynamoDBInterface)(nil).GetItem), varargs...)
}

// PutItem mocks base method.
func (m *MockdynamoDBInterface) PutItem(ctx context.Context, params *dynamodb.PutItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.PutItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutItem", varargs...)
	ret0, _ := ret[0].(*dynamodb.PutItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutItem indicates an expected call of PutItem.
func (mr *MockdynamoDBInterfaceMockRecorder) PutItem(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItem", reflect.TypeOf((*MockdynamoDBInterface)(nil).PutItem), varargs...)
}
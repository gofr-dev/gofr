// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mqtt is a generated GoMock package.
package mqtt

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// IncrementCounter mocks base method.
func (m *MockMetrics) IncrementCounter(ctx context.Context, name string, labels ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, name}
	for _, a := range labels {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "IncrementCounter", varargs...)
}

// IncrementCounter indicates an expected call of IncrementCounter.
func (mr *MockMetricsMockRecorder) IncrementCounter(ctx, name interface{}, labels ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, name}, labels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementCounter", reflect.TypeOf((*MockMetrics)(nil).IncrementCounter), varargs...)
}

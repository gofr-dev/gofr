// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nats-io/nats.go/jetstream (interfaces: jStream,Stream,Consumer,Msg,MessageBatch)
//
// Generated by this command:
//
//	mockgen -destination=mock_jetstream.go -package=nats github.com/nats-io/nats.go/jetstream jStream,Stream,Consumer,Msg,MessageBatch
//

// Package nats is a generated GoMock package.
package nats

import (
	context "context"
	reflect "reflect"
	time "time"

	nats "github.com/nats-io/nats.go"
	jetstream "github.com/nats-io/nats.go/jetstream"
	gomock "go.uber.org/mock/gomock"
)

// MockJetStream is a mock of jStream interface.
type MockJetStream struct {
	ctrl     *gomock.Controller
	recorder *MockJetStreamMockRecorder
	isgomock struct{}
}

// MockJetStreamMockRecorder is the mock recorder for MockJetStream.
type MockJetStreamMockRecorder struct {
	mock *MockJetStream
}

// NewMockJetStream creates a new mock instance.
func NewMockJetStream(ctrl *gomock.Controller) *MockJetStream {
	mock := &MockJetStream{ctrl: ctrl}
	mock.recorder = &MockJetStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJetStream) EXPECT() *MockJetStreamMockRecorder {
	return m.recorder
}

// AccountInfo mocks base method.
func (m *MockJetStream) AccountInfo(ctx context.Context) (*jetstream.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountInfo", ctx)
	ret0, _ := ret[0].(*jetstream.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountInfo indicates an expected call of AccountInfo.
func (mr *MockJetStreamMockRecorder) AccountInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountInfo", reflect.TypeOf((*MockJetStream)(nil).AccountInfo), ctx)
}

// CleanupPublisher mocks base method.
func (m *MockJetStream) CleanupPublisher() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanupPublisher")
}

// CleanupPublisher indicates an expected call of CleanupPublisher.
func (mr *MockJetStreamMockRecorder) CleanupPublisher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupPublisher", reflect.TypeOf((*MockJetStream)(nil).CleanupPublisher))
}

// Consumer mocks base method.
func (m *MockJetStream) Consumer(ctx context.Context, stream, consumer string) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consumer", ctx, stream, consumer)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consumer indicates an expected call of Consumer.
func (mr *MockJetStreamMockRecorder) Consumer(ctx, stream, consumer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consumer", reflect.TypeOf((*MockJetStream)(nil).Consumer), ctx, stream, consumer)
}

// CreateConsumer mocks base method.
func (m *MockJetStream) CreateConsumer(ctx context.Context, stream string, cfg jetstream.ConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConsumer indicates an expected call of CreateConsumer.
func (mr *MockJetStreamMockRecorder) CreateConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConsumer", reflect.TypeOf((*MockJetStream)(nil).CreateConsumer), ctx, stream, cfg)
}

// CreateKeyValue mocks base method.
func (m *MockJetStream) CreateKeyValue(ctx context.Context, cfg jetstream.KeyValueConfig) (jetstream.KeyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyValue", ctx, cfg)
	ret0, _ := ret[0].(jetstream.KeyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyValue indicates an expected call of CreateKeyValue.
func (mr *MockJetStreamMockRecorder) CreateKeyValue(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyValue", reflect.TypeOf((*MockJetStream)(nil).CreateKeyValue), ctx, cfg)
}

// CreateObjectStore mocks base method.
func (m *MockJetStream) CreateObjectStore(ctx context.Context, cfg jetstream.ObjectStoreConfig) (jetstream.ObjectStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObjectStore", ctx, cfg)
	ret0, _ := ret[0].(jetstream.ObjectStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObjectStore indicates an expected call of CreateObjectStore.
func (mr *MockJetStreamMockRecorder) CreateObjectStore(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectStore", reflect.TypeOf((*MockJetStream)(nil).CreateObjectStore), ctx, cfg)
}

// CreateOrUpdateConsumer mocks base method.
func (m *MockJetStream) CreateOrUpdateConsumer(ctx context.Context, stream string, cfg jetstream.ConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateConsumer indicates an expected call of CreateOrUpdateConsumer.
func (mr *MockJetStreamMockRecorder) CreateOrUpdateConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateConsumer", reflect.TypeOf((*MockJetStream)(nil).CreateOrUpdateConsumer), ctx, stream, cfg)
}

// CreateOrUpdateKeyValue mocks base method.
func (m *MockJetStream) CreateOrUpdateKeyValue(ctx context.Context, cfg jetstream.KeyValueConfig) (jetstream.KeyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateKeyValue", ctx, cfg)
	ret0, _ := ret[0].(jetstream.KeyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateKeyValue indicates an expected call of CreateOrUpdateKeyValue.
func (mr *MockJetStreamMockRecorder) CreateOrUpdateKeyValue(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateKeyValue", reflect.TypeOf((*MockJetStream)(nil).CreateOrUpdateKeyValue), ctx, cfg)
}

// CreateOrUpdateObjectStore mocks base method.
func (m *MockJetStream) CreateOrUpdateObjectStore(ctx context.Context, cfg jetstream.ObjectStoreConfig) (jetstream.ObjectStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateObjectStore", ctx, cfg)
	ret0, _ := ret[0].(jetstream.ObjectStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateObjectStore indicates an expected call of CreateOrUpdateObjectStore.
func (mr *MockJetStreamMockRecorder) CreateOrUpdateObjectStore(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateObjectStore", reflect.TypeOf((*MockJetStream)(nil).CreateOrUpdateObjectStore), ctx, cfg)
}

// CreateOrUpdateStream mocks base method.
func (m *MockJetStream) CreateOrUpdateStream(ctx context.Context, cfg jetstream.StreamConfig) (jetstream.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateStream", ctx, cfg)
	ret0, _ := ret[0].(jetstream.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateStream indicates an expected call of CreateOrUpdateStream.
func (mr *MockJetStreamMockRecorder) CreateOrUpdateStream(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateStream", reflect.TypeOf((*MockJetStream)(nil).CreateOrUpdateStream), ctx, cfg)
}

// CreateStream mocks base method.
func (m *MockJetStream) CreateStream(ctx context.Context, cfg jetstream.StreamConfig) (jetstream.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", ctx, cfg)
	ret0, _ := ret[0].(jetstream.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockJetStreamMockRecorder) CreateStream(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockJetStream)(nil).CreateStream), ctx, cfg)
}

// DeleteConsumer mocks base method.
func (m *MockJetStream) DeleteConsumer(ctx context.Context, stream, consumer string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConsumer", ctx, stream, consumer)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConsumer indicates an expected call of DeleteConsumer.
func (mr *MockJetStreamMockRecorder) DeleteConsumer(ctx, stream, consumer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConsumer", reflect.TypeOf((*MockJetStream)(nil).DeleteConsumer), ctx, stream, consumer)
}

// DeleteKeyValue mocks base method.
func (m *MockJetStream) DeleteKeyValue(ctx context.Context, bucket string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyValue", ctx, bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeyValue indicates an expected call of DeleteKeyValue.
func (mr *MockJetStreamMockRecorder) DeleteKeyValue(ctx, bucket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyValue", reflect.TypeOf((*MockJetStream)(nil).DeleteKeyValue), ctx, bucket)
}

// DeleteObjectStore mocks base method.
func (m *MockJetStream) DeleteObjectStore(ctx context.Context, bucket string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectStore", ctx, bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjectStore indicates an expected call of DeleteObjectStore.
func (mr *MockJetStreamMockRecorder) DeleteObjectStore(ctx, bucket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectStore", reflect.TypeOf((*MockJetStream)(nil).DeleteObjectStore), ctx, bucket)
}

// DeleteStream mocks base method.
func (m *MockJetStream) DeleteStream(ctx context.Context, stream string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStream", ctx, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStream indicates an expected call of DeleteStream.
func (mr *MockJetStreamMockRecorder) DeleteStream(ctx, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStream", reflect.TypeOf((*MockJetStream)(nil).DeleteStream), ctx, stream)
}

// KeyValue mocks base method.
func (m *MockJetStream) KeyValue(ctx context.Context, bucket string) (jetstream.KeyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyValue", ctx, bucket)
	ret0, _ := ret[0].(jetstream.KeyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeyValue indicates an expected call of KeyValue.
func (mr *MockJetStreamMockRecorder) KeyValue(ctx, bucket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyValue", reflect.TypeOf((*MockJetStream)(nil).KeyValue), ctx, bucket)
}

// KeyValueStoreNames mocks base method.
func (m *MockJetStream) KeyValueStoreNames(ctx context.Context) jetstream.KeyValueNamesLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyValueStoreNames", ctx)
	ret0, _ := ret[0].(jetstream.KeyValueNamesLister)
	return ret0
}

// KeyValueStoreNames indicates an expected call of KeyValueStoreNames.
func (mr *MockJetStreamMockRecorder) KeyValueStoreNames(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyValueStoreNames", reflect.TypeOf((*MockJetStream)(nil).KeyValueStoreNames), ctx)
}

// KeyValueStores mocks base method.
func (m *MockJetStream) KeyValueStores(ctx context.Context) jetstream.KeyValueLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyValueStores", ctx)
	ret0, _ := ret[0].(jetstream.KeyValueLister)
	return ret0
}

// KeyValueStores indicates an expected call of KeyValueStores.
func (mr *MockJetStreamMockRecorder) KeyValueStores(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyValueStores", reflect.TypeOf((*MockJetStream)(nil).KeyValueStores), ctx)
}

// ListStreams mocks base method.
func (m *MockJetStream) ListStreams(arg0 context.Context, arg1 ...jetstream.StreamListOpt) jetstream.StreamInfoLister {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreams", varargs...)
	ret0, _ := ret[0].(jetstream.StreamInfoLister)
	return ret0
}

// ListStreams indicates an expected call of ListStreams.
func (mr *MockJetStreamMockRecorder) ListStreams(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreams", reflect.TypeOf((*MockJetStream)(nil).ListStreams), varargs...)
}

// ObjectStore mocks base method.
func (m *MockJetStream) ObjectStore(ctx context.Context, bucket string) (jetstream.ObjectStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectStore", ctx, bucket)
	ret0, _ := ret[0].(jetstream.ObjectStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectStore indicates an expected call of ObjectStore.
func (mr *MockJetStreamMockRecorder) ObjectStore(ctx, bucket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectStore", reflect.TypeOf((*MockJetStream)(nil).ObjectStore), ctx, bucket)
}

// ObjectStoreNames mocks base method.
func (m *MockJetStream) ObjectStoreNames(ctx context.Context) jetstream.ObjectStoreNamesLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectStoreNames", ctx)
	ret0, _ := ret[0].(jetstream.ObjectStoreNamesLister)
	return ret0
}

// ObjectStoreNames indicates an expected call of ObjectStoreNames.
func (mr *MockJetStreamMockRecorder) ObjectStoreNames(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectStoreNames", reflect.TypeOf((*MockJetStream)(nil).ObjectStoreNames), ctx)
}

// ObjectStores mocks base method.
func (m *MockJetStream) ObjectStores(ctx context.Context) jetstream.ObjectStoresLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectStores", ctx)
	ret0, _ := ret[0].(jetstream.ObjectStoresLister)
	return ret0
}

// ObjectStores indicates an expected call of ObjectStores.
func (mr *MockJetStreamMockRecorder) ObjectStores(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectStores", reflect.TypeOf((*MockJetStream)(nil).ObjectStores), ctx)
}

// OrderedConsumer mocks base method.
func (m *MockJetStream) OrderedConsumer(ctx context.Context, stream string, cfg jetstream.OrderedConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderedConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderedConsumer indicates an expected call of OrderedConsumer.
func (mr *MockJetStreamMockRecorder) OrderedConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderedConsumer", reflect.TypeOf((*MockJetStream)(nil).OrderedConsumer), ctx, stream, cfg)
}

// Publish mocks base method.
func (m *MockJetStream) Publish(ctx context.Context, subject string, payload []byte, opts ...jetstream.PublishOpt) (*jetstream.PubAck, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subject, payload}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(*jetstream.PubAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockJetStreamMockRecorder) Publish(ctx, subject, payload any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subject, payload}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockJetStream)(nil).Publish), varargs...)
}

// PublishAsync mocks base method.
func (m *MockJetStream) PublishAsync(subject string, payload []byte, opts ...jetstream.PublishOpt) (jetstream.PubAckFuture, error) {
	m.ctrl.T.Helper()
	varargs := []any{subject, payload}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishAsync", varargs...)
	ret0, _ := ret[0].(jetstream.PubAckFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishAsync indicates an expected call of PublishAsync.
func (mr *MockJetStreamMockRecorder) PublishAsync(subject, payload any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{subject, payload}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAsync", reflect.TypeOf((*MockJetStream)(nil).PublishAsync), varargs...)
}

// PublishAsyncComplete mocks base method.
func (m *MockJetStream) PublishAsyncComplete() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishAsyncComplete")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// PublishAsyncComplete indicates an expected call of PublishAsyncComplete.
func (mr *MockJetStreamMockRecorder) PublishAsyncComplete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAsyncComplete", reflect.TypeOf((*MockJetStream)(nil).PublishAsyncComplete))
}

// PublishAsyncPending mocks base method.
func (m *MockJetStream) PublishAsyncPending() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishAsyncPending")
	ret0, _ := ret[0].(int)
	return ret0
}

// PublishAsyncPending indicates an expected call of PublishAsyncPending.
func (mr *MockJetStreamMockRecorder) PublishAsyncPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAsyncPending", reflect.TypeOf((*MockJetStream)(nil).PublishAsyncPending))
}

// PublishMsg mocks base method.
func (m *MockJetStream) PublishMsg(ctx context.Context, msg *nats.Msg, opts ...jetstream.PublishOpt) (*jetstream.PubAck, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishMsg", varargs...)
	ret0, _ := ret[0].(*jetstream.PubAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishMsg indicates an expected call of PublishMsg.
func (mr *MockJetStreamMockRecorder) PublishMsg(ctx, msg any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMsg", reflect.TypeOf((*MockJetStream)(nil).PublishMsg), varargs...)
}

// PublishMsgAsync mocks base method.
func (m *MockJetStream) PublishMsgAsync(msg *nats.Msg, opts ...jetstream.PublishOpt) (jetstream.PubAckFuture, error) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishMsgAsync", varargs...)
	ret0, _ := ret[0].(jetstream.PubAckFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishMsgAsync indicates an expected call of PublishMsgAsync.
func (mr *MockJetStreamMockRecorder) PublishMsgAsync(msg any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMsgAsync", reflect.TypeOf((*MockJetStream)(nil).PublishMsgAsync), varargs...)
}

// Stream mocks base method.
func (m *MockJetStream) Stream(ctx context.Context, stream string) (jetstream.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", ctx, stream)
	ret0, _ := ret[0].(jetstream.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stream indicates an expected call of Stream.
func (mr *MockJetStreamMockRecorder) Stream(ctx, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockJetStream)(nil).Stream), ctx, stream)
}

// StreamNameBySubject mocks base method.
func (m *MockJetStream) StreamNameBySubject(ctx context.Context, subject string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamNameBySubject", ctx, subject)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamNameBySubject indicates an expected call of StreamNameBySubject.
func (mr *MockJetStreamMockRecorder) StreamNameBySubject(ctx, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamNameBySubject", reflect.TypeOf((*MockJetStream)(nil).StreamNameBySubject), ctx, subject)
}

// StreamNames mocks base method.
func (m *MockJetStream) StreamNames(arg0 context.Context, arg1 ...jetstream.StreamListOpt) jetstream.StreamNameLister {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamNames", varargs...)
	ret0, _ := ret[0].(jetstream.StreamNameLister)
	return ret0
}

// StreamNames indicates an expected call of StreamNames.
func (mr *MockJetStreamMockRecorder) StreamNames(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamNames", reflect.TypeOf((*MockJetStream)(nil).StreamNames), varargs...)
}

// UpdateConsumer mocks base method.
func (m *MockJetStream) UpdateConsumer(ctx context.Context, stream string, cfg jetstream.ConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConsumer indicates an expected call of UpdateConsumer.
func (mr *MockJetStreamMockRecorder) UpdateConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConsumer", reflect.TypeOf((*MockJetStream)(nil).UpdateConsumer), ctx, stream, cfg)
}

// UpdateKeyValue mocks base method.
func (m *MockJetStream) UpdateKeyValue(ctx context.Context, cfg jetstream.KeyValueConfig) (jetstream.KeyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeyValue", ctx, cfg)
	ret0, _ := ret[0].(jetstream.KeyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKeyValue indicates an expected call of UpdateKeyValue.
func (mr *MockJetStreamMockRecorder) UpdateKeyValue(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeyValue", reflect.TypeOf((*MockJetStream)(nil).UpdateKeyValue), ctx, cfg)
}

// UpdateObjectStore mocks base method.
func (m *MockJetStream) UpdateObjectStore(ctx context.Context, cfg jetstream.ObjectStoreConfig) (jetstream.ObjectStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateObjectStore", ctx, cfg)
	ret0, _ := ret[0].(jetstream.ObjectStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateObjectStore indicates an expected call of UpdateObjectStore.
func (mr *MockJetStreamMockRecorder) UpdateObjectStore(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjectStore", reflect.TypeOf((*MockJetStream)(nil).UpdateObjectStore), ctx, cfg)
}

// UpdateStream mocks base method.
func (m *MockJetStream) UpdateStream(ctx context.Context, cfg jetstream.StreamConfig) (jetstream.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStream", ctx, cfg)
	ret0, _ := ret[0].(jetstream.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStream indicates an expected call of UpdateStream.
func (mr *MockJetStreamMockRecorder) UpdateStream(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStream", reflect.TypeOf((*MockJetStream)(nil).UpdateStream), ctx, cfg)
}

// MockStream is a mock of Stream interface.
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
	isgomock struct{}
}

// MockStreamMockRecorder is the mock recorder for MockStream.
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance.
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// CachedInfo mocks base method.
func (m *MockStream) CachedInfo() *jetstream.StreamInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CachedInfo")
	ret0, _ := ret[0].(*jetstream.StreamInfo)
	return ret0
}

// CachedInfo indicates an expected call of CachedInfo.
func (mr *MockStreamMockRecorder) CachedInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CachedInfo", reflect.TypeOf((*MockStream)(nil).CachedInfo))
}

// Consumer mocks base method.
func (m *MockStream) Consumer(ctx context.Context, consumer string) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consumer", ctx, consumer)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consumer indicates an expected call of Consumer.
func (mr *MockStreamMockRecorder) Consumer(ctx, consumer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consumer", reflect.TypeOf((*MockStream)(nil).Consumer), ctx, consumer)
}

// ConsumerNames mocks base method.
func (m *MockStream) ConsumerNames(arg0 context.Context) jetstream.ConsumerNameLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumerNames", arg0)
	ret0, _ := ret[0].(jetstream.ConsumerNameLister)
	return ret0
}

// ConsumerNames indicates an expected call of ConsumerNames.
func (mr *MockStreamMockRecorder) ConsumerNames(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumerNames", reflect.TypeOf((*MockStream)(nil).ConsumerNames), arg0)
}

// CreateConsumer mocks base method.
func (m *MockStream) CreateConsumer(ctx context.Context, cfg jetstream.ConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConsumer", ctx, cfg)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConsumer indicates an expected call of CreateConsumer.
func (mr *MockStreamMockRecorder) CreateConsumer(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConsumer", reflect.TypeOf((*MockStream)(nil).CreateConsumer), ctx, cfg)
}

// CreateOrUpdateConsumer mocks base method.
func (m *MockStream) CreateOrUpdateConsumer(ctx context.Context, cfg jetstream.ConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateConsumer", ctx, cfg)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateConsumer indicates an expected call of CreateOrUpdateConsumer.
func (mr *MockStreamMockRecorder) CreateOrUpdateConsumer(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateConsumer", reflect.TypeOf((*MockStream)(nil).CreateOrUpdateConsumer), ctx, cfg)
}

// DeleteConsumer mocks base method.
func (m *MockStream) DeleteConsumer(ctx context.Context, consumer string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConsumer", ctx, consumer)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConsumer indicates an expected call of DeleteConsumer.
func (mr *MockStreamMockRecorder) DeleteConsumer(ctx, consumer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConsumer", reflect.TypeOf((*MockStream)(nil).DeleteConsumer), ctx, consumer)
}

// DeleteMsg mocks base method.
func (m *MockStream) DeleteMsg(ctx context.Context, seq uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMsg", ctx, seq)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMsg indicates an expected call of DeleteMsg.
func (mr *MockStreamMockRecorder) DeleteMsg(ctx, seq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMsg", reflect.TypeOf((*MockStream)(nil).DeleteMsg), ctx, seq)
}

// GetLastMsgForSubject mocks base method.
func (m *MockStream) GetLastMsgForSubject(ctx context.Context, subject string) (*jetstream.RawStreamMsg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastMsgForSubject", ctx, subject)
	ret0, _ := ret[0].(*jetstream.RawStreamMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastMsgForSubject indicates an expected call of GetLastMsgForSubject.
func (mr *MockStreamMockRecorder) GetLastMsgForSubject(ctx, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastMsgForSubject", reflect.TypeOf((*MockStream)(nil).GetLastMsgForSubject), ctx, subject)
}

// GetMsg mocks base method.
func (m *MockStream) GetMsg(ctx context.Context, seq uint64, opts ...jetstream.GetMsgOpt) (*jetstream.RawStreamMsg, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, seq}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMsg", varargs...)
	ret0, _ := ret[0].(*jetstream.RawStreamMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMsg indicates an expected call of GetMsg.
func (mr *MockStreamMockRecorder) GetMsg(ctx, seq any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, seq}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMsg", reflect.TypeOf((*MockStream)(nil).GetMsg), varargs...)
}

// Info mocks base method.
func (m *MockStream) Info(ctx context.Context, opts ...jetstream.StreamInfoOpt) (*jetstream.StreamInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*jetstream.StreamInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockStreamMockRecorder) Info(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockStream)(nil).Info), varargs...)
}

// ListConsumers mocks base method.
func (m *MockStream) ListConsumers(arg0 context.Context) jetstream.ConsumerInfoLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConsumers", arg0)
	ret0, _ := ret[0].(jetstream.ConsumerInfoLister)
	return ret0
}

// ListConsumers indicates an expected call of ListConsumers.
func (mr *MockStreamMockRecorder) ListConsumers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConsumers", reflect.TypeOf((*MockStream)(nil).ListConsumers), arg0)
}

// OrderedConsumer mocks base method.
func (m *MockStream) OrderedConsumer(ctx context.Context, cfg jetstream.OrderedConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderedConsumer", ctx, cfg)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderedConsumer indicates an expected call of OrderedConsumer.
func (mr *MockStreamMockRecorder) OrderedConsumer(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderedConsumer", reflect.TypeOf((*MockStream)(nil).OrderedConsumer), ctx, cfg)
}

// Purge mocks base method.
func (m *MockStream) Purge(ctx context.Context, opts ...jetstream.StreamPurgeOpt) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Purge", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Purge indicates an expected call of Purge.
func (mr *MockStreamMockRecorder) Purge(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockStream)(nil).Purge), varargs...)
}

// SecureDeleteMsg mocks base method.
func (m *MockStream) SecureDeleteMsg(ctx context.Context, seq uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecureDeleteMsg", ctx, seq)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecureDeleteMsg indicates an expected call of SecureDeleteMsg.
func (mr *MockStreamMockRecorder) SecureDeleteMsg(ctx, seq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecureDeleteMsg", reflect.TypeOf((*MockStream)(nil).SecureDeleteMsg), ctx, seq)
}

// UpdateConsumer mocks base method.
func (m *MockStream) UpdateConsumer(ctx context.Context, cfg jetstream.ConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConsumer", ctx, cfg)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConsumer indicates an expected call of UpdateConsumer.
func (mr *MockStreamMockRecorder) UpdateConsumer(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConsumer", reflect.TypeOf((*MockStream)(nil).UpdateConsumer), ctx, cfg)
}

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
	isgomock struct{}
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// CachedInfo mocks base method.
func (m *MockConsumer) CachedInfo() *jetstream.ConsumerInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CachedInfo")
	ret0, _ := ret[0].(*jetstream.ConsumerInfo)
	return ret0
}

// CachedInfo indicates an expected call of CachedInfo.
func (mr *MockConsumerMockRecorder) CachedInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CachedInfo", reflect.TypeOf((*MockConsumer)(nil).CachedInfo))
}

// Consume mocks base method.
func (m *MockConsumer) Consume(handler jetstream.MessageHandler, opts ...jetstream.PullConsumeOpt) (jetstream.ConsumeContext, error) {
	m.ctrl.T.Helper()
	varargs := []any{handler}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Consume", varargs...)
	ret0, _ := ret[0].(jetstream.ConsumeContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockConsumerMockRecorder) Consume(handler any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{handler}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockConsumer)(nil).Consume), varargs...)
}

// Fetch mocks base method.
func (m *MockConsumer) Fetch(batch int, opts ...jetstream.FetchOpt) (jetstream.MessageBatch, error) {
	m.ctrl.T.Helper()
	varargs := []any{batch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Fetch", varargs...)
	ret0, _ := ret[0].(jetstream.MessageBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockConsumerMockRecorder) Fetch(batch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{batch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockConsumer)(nil).Fetch), varargs...)
}

// FetchBytes mocks base method.
func (m *MockConsumer) FetchBytes(maxBytes int, opts ...jetstream.FetchOpt) (jetstream.MessageBatch, error) {
	m.ctrl.T.Helper()
	varargs := []any{maxBytes}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchBytes", varargs...)
	ret0, _ := ret[0].(jetstream.MessageBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBytes indicates an expected call of FetchBytes.
func (mr *MockConsumerMockRecorder) FetchBytes(maxBytes any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{maxBytes}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBytes", reflect.TypeOf((*MockConsumer)(nil).FetchBytes), varargs...)
}

// FetchNoWait mocks base method.
func (m *MockConsumer) FetchNoWait(batch int) (jetstream.MessageBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchNoWait", batch)
	ret0, _ := ret[0].(jetstream.MessageBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchNoWait indicates an expected call of FetchNoWait.
func (mr *MockConsumerMockRecorder) FetchNoWait(batch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchNoWait", reflect.TypeOf((*MockConsumer)(nil).FetchNoWait), batch)
}

// Info mocks base method.
func (m *MockConsumer) Info(arg0 context.Context) (*jetstream.ConsumerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", arg0)
	ret0, _ := ret[0].(*jetstream.ConsumerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockConsumerMockRecorder) Info(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockConsumer)(nil).Info), arg0)
}

// Messages mocks base method.
func (m *MockConsumer) Messages(opts ...jetstream.PullMessagesOpt) (jetstream.MessagesContext, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Messages", varargs...)
	ret0, _ := ret[0].(jetstream.MessagesContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Messages indicates an expected call of Messages.
func (mr *MockConsumerMockRecorder) Messages(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Messages", reflect.TypeOf((*MockConsumer)(nil).Messages), opts...)
}

// Next mocks base method.
func (m *MockConsumer) Next(opts ...jetstream.FetchOpt) (jetstream.Msg, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Next", varargs...)
	ret0, _ := ret[0].(jetstream.Msg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockConsumerMockRecorder) Next(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockConsumer)(nil).Next), opts...)
}

// MockMsg is a mock of Msg interface.
type MockMsg struct {
	ctrl     *gomock.Controller
	recorder *MockMsgMockRecorder
	isgomock struct{}
}

// MockMsgMockRecorder is the mock recorder for MockMsg.
type MockMsgMockRecorder struct {
	mock *MockMsg
}

// NewMockMsg creates a new mock instance.
func NewMockMsg(ctrl *gomock.Controller) *MockMsg {
	mock := &MockMsg{ctrl: ctrl}
	mock.recorder = &MockMsgMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMsg) EXPECT() *MockMsgMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockMsg) Ack() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack.
func (mr *MockMsgMockRecorder) Ack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockMsg)(nil).Ack))
}

// Data mocks base method.
func (m *MockMsg) Data() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockMsgMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockMsg)(nil).Data))
}

// DoubleAck mocks base method.
func (m *MockMsg) DoubleAck(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoubleAck", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoubleAck indicates an expected call of DoubleAck.
func (mr *MockMsgMockRecorder) DoubleAck(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoubleAck", reflect.TypeOf((*MockMsg)(nil).DoubleAck), arg0)
}

// Headers mocks base method.
func (m *MockMsg) Headers() nats.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Headers")
	ret0, _ := ret[0].(nats.Header)
	return ret0
}

// Headers indicates an expected call of Headers.
func (mr *MockMsgMockRecorder) Headers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Headers", reflect.TypeOf((*MockMsg)(nil).Headers))
}

// InProgress mocks base method.
func (m *MockMsg) InProgress() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InProgress")
	ret0, _ := ret[0].(error)
	return ret0
}

// InProgress indicates an expected call of InProgress.
func (mr *MockMsgMockRecorder) InProgress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InProgress", reflect.TypeOf((*MockMsg)(nil).InProgress))
}

// Metadata mocks base method.
func (m *MockMsg) Metadata() (*jetstream.MsgMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(*jetstream.MsgMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Metadata indicates an expected call of Metadata.
func (mr *MockMsgMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockMsg)(nil).Metadata))
}

// Nak mocks base method.
func (m *MockMsg) Nak() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nak")
	ret0, _ := ret[0].(error)
	return ret0
}

// Nak indicates an expected call of Nak.
func (mr *MockMsgMockRecorder) Nak() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nak", reflect.TypeOf((*MockMsg)(nil).Nak))
}

// NakWithDelay mocks base method.
func (m *MockMsg) NakWithDelay(delay time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NakWithDelay", delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// NakWithDelay indicates an expected call of NakWithDelay.
func (mr *MockMsgMockRecorder) NakWithDelay(delay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NakWithDelay", reflect.TypeOf((*MockMsg)(nil).NakWithDelay), delay)
}

// Reply mocks base method.
func (m *MockMsg) Reply() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reply")
	ret0, _ := ret[0].(string)
	return ret0
}

// Reply indicates an expected call of Reply.
func (mr *MockMsgMockRecorder) Reply() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reply", reflect.TypeOf((*MockMsg)(nil).Reply))
}

// Subject mocks base method.
func (m *MockMsg) Subject() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subject")
	ret0, _ := ret[0].(string)
	return ret0
}

// Subject indicates an expected call of Subject.
func (mr *MockMsgMockRecorder) Subject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subject", reflect.TypeOf((*MockMsg)(nil).Subject))
}

// Term mocks base method.
func (m *MockMsg) Term() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Term")
	ret0, _ := ret[0].(error)
	return ret0
}

// Term indicates an expected call of Term.
func (mr *MockMsgMockRecorder) Term() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Term", reflect.TypeOf((*MockMsg)(nil).Term))
}

// TermWithReason mocks base method.
func (m *MockMsg) TermWithReason(reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TermWithReason", reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// TermWithReason indicates an expected call of TermWithReason.
func (mr *MockMsgMockRecorder) TermWithReason(reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TermWithReason", reflect.TypeOf((*MockMsg)(nil).TermWithReason), reason)
}

// MockMessageBatch is a mock of MessageBatch interface.
type MockMessageBatch struct {
	ctrl     *gomock.Controller
	recorder *MockMessageBatchMockRecorder
	isgomock struct{}
}

// MockMessageBatchMockRecorder is the mock recorder for MockMessageBatch.
type MockMessageBatchMockRecorder struct {
	mock *MockMessageBatch
}

// NewMockMessageBatch creates a new mock instance.
func NewMockMessageBatch(ctrl *gomock.Controller) *MockMessageBatch {
	mock := &MockMessageBatch{ctrl: ctrl}
	mock.recorder = &MockMessageBatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageBatch) EXPECT() *MockMessageBatchMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockMessageBatch) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockMessageBatchMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockMessageBatch)(nil).Error))
}

// Messages mocks base method.
func (m *MockMessageBatch) Messages() <-chan jetstream.Msg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Messages")
	ret0, _ := ret[0].(<-chan jetstream.Msg)
	return ret0
}

// Messages indicates an expected call of Messages.
func (mr *MockMessageBatchMockRecorder) Messages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Messages", reflect.TypeOf((*MockMessageBatch)(nil).Messages))
}

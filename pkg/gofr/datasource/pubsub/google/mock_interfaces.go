// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -package=google -destination=mock_interfaces.go
//

// Package google is a generated GoMock package.
package google

import (
	context "context"
	reflect "reflect"

	pubsub "cloud.google.com/go/pubsub"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// CreateSubscription mocks base method.
func (m *MockClient) CreateSubscription(ctx context.Context, id string, cfg pubsub.SubscriptionConfig) (*pubsub.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx, id, cfg)
	ret0, _ := ret[0].(*pubsub.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockClientMockRecorder) CreateSubscription(ctx, id, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockClient)(nil).CreateSubscription), ctx, id, cfg)
}

// CreateTopic mocks base method.
func (m *MockClient) CreateTopic(ctx context.Context, topicID string) (*pubsub.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopic", ctx, topicID)
	ret0, _ := ret[0].(*pubsub.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopic indicates an expected call of CreateTopic.
func (mr *MockClientMockRecorder) CreateTopic(ctx, topicID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockClient)(nil).CreateTopic), ctx, topicID)
}

// Subscription mocks base method.
func (m *MockClient) Subscription(id string) *pubsub.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscription", id)
	ret0, _ := ret[0].(*pubsub.Subscription)
	return ret0
}

// Subscription indicates an expected call of Subscription.
func (mr *MockClientMockRecorder) Subscription(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscription", reflect.TypeOf((*MockClient)(nil).Subscription), id)
}

// Subscriptions mocks base method.
func (m *MockClient) Subscriptions(ctx context.Context) *pubsub.SubscriptionIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscriptions", ctx)
	ret0, _ := ret[0].(*pubsub.SubscriptionIterator)
	return ret0
}

// Subscriptions indicates an expected call of Subscriptions.
func (mr *MockClientMockRecorder) Subscriptions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscriptions", reflect.TypeOf((*MockClient)(nil).Subscriptions), ctx)
}

// Topic mocks base method.
func (m *MockClient) Topic(id string) *pubsub.Topic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic", id)
	ret0, _ := ret[0].(*pubsub.Topic)
	return ret0
}

// Topic indicates an expected call of Topic.
func (mr *MockClientMockRecorder) Topic(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*MockClient)(nil).Topic), id)
}

// Topics mocks base method.
func (m *MockClient) Topics(ctx context.Context) *pubsub.TopicIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topics", ctx)
	ret0, _ := ret[0].(*pubsub.TopicIterator)
	return ret0
}

// Topics indicates an expected call of Topics.
func (mr *MockClientMockRecorder) Topics(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topics", reflect.TypeOf((*MockClient)(nil).Topics), ctx)
}

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// CreateSubscription mocks base method.
func (m *MockWriter) CreateSubscription(ctx context.Context, id string, cfg pubsub.SubscriptionConfig) (*pubsub.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx, id, cfg)
	ret0, _ := ret[0].(*pubsub.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockWriterMockRecorder) CreateSubscription(ctx, id, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockWriter)(nil).CreateSubscription), ctx, id, cfg)
}

// Subscription mocks base method.
func (m *MockWriter) Subscription(id string) *pubsub.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscription", id)
	ret0, _ := ret[0].(*pubsub.Subscription)
	return ret0
}

// Subscription indicates an expected call of Subscription.
func (mr *MockWriterMockRecorder) Subscription(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscription", reflect.TypeOf((*MockWriter)(nil).Subscription), id)
}

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// CreateTopic mocks base method.
func (m *MockReader) CreateTopic(ctx context.Context, topicID string) (*pubsub.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopic", ctx, topicID)
	ret0, _ := ret[0].(*pubsub.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopic indicates an expected call of CreateTopic.
func (mr *MockReaderMockRecorder) CreateTopic(ctx, topicID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockReader)(nil).CreateTopic), ctx, topicID)
}

// Topic mocks base method.
func (m *MockReader) Topic(id string) *pubsub.Topic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic", id)
	ret0, _ := ret[0].(*pubsub.Topic)
	return ret0
}

// Topic indicates an expected call of Topic.
func (mr *MockReaderMockRecorder) Topic(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*MockReader)(nil).Topic), id)
}

// Code generated by gofr.dev/cli/gofr. DO NOT EDIT.
// versions:
// 	gofr-cli v0.7.0
// 	gofr.dev v1.39.0
// 	source: chat.proto

package server

import (
	"context"
	"time"
	
	"gofr.dev/pkg/gofr"
	"gofr.dev/pkg/gofr/container"
	gofrgRPC "gofr.dev/pkg/gofr/grpc"
	"google.golang.org/grpc"
	
	healthpb "google.golang.org/grpc/health/grpc_health_v1"
)

// NewChatServiceGoFrServer creates a new instance of ChatServiceGoFrServer
func NewChatServiceGoFrServer() *ChatServiceGoFrServer {
	return &ChatServiceGoFrServer{
		health: getOrCreateHealthServer(), // Initialize the health server
	}
}

// ChatServiceServerWithGofr is the interface for the server implementation
type ChatServiceServerWithGofr interface {
	ServerStream(*gofr.Context, ChatService_ServerStreamServer) error
	ClientStream(*gofr.Context, ChatService_ClientStreamServer) error
	BiDiStream(*gofr.Context, ChatService_BiDiStreamServer) error
}

// ChatServiceServerWrapper wraps the server and handles request and response logic
type ChatServiceServerWrapper struct {
	ChatServiceServer
	*healthServer
	Container *container.Container
	server    ChatServiceServerWithGofr
}

// Base instrumented stream
type instrumentedStream struct {
	grpc.ServerStream
	ctx    *gofr.Context
	method string
}

func (s *instrumentedStream) Context() context.Context {
	return s.ctx
}

func (s *instrumentedStream) SendMsg(m interface{}) error {
	start := time.Now()
	span := s.ctx.Trace(s.method + "/SendMsg")
	defer span.End()

	err := s.ServerStream.SendMsg(m)

	logger := gofrgRPC.NewgRPCLogger()
	logger.DocumentRPCLog(s.ctx, s.ctx.Logger, s.ctx.Metrics(), start, err,
		s.method+"/SendMsg", "app_gRPC-Stream_stats")

	return err
}

func (s *instrumentedStream) RecvMsg(m interface{}) error {
	start := time.Now()
	span := s.ctx.Trace(s.method + "/RecvMsg")
	defer span.End()

	err := s.ServerStream.RecvMsg(m)

	logger := gofrgRPC.NewgRPCLogger()
	logger.DocumentRPCLog(s.ctx, s.ctx.Logger, s.ctx.Metrics(), start, err,
		s.method+"/RecvMsg", "app_gRPC-Stream_stats")

	return err
}

// Server-side streaming specific wrapper
type serverStreamWrapperServerStream struct {
	*instrumentedStream
}

func (w *serverStreamWrapperServerStream) Send(m *Response) error {
	start := time.Now()
	span := w.ctx.Trace(w.method + "/Send")
	defer span.End()
	
	err := w.ServerStream.SendMsg(m)
	
	logger := gofrgRPC.NewgRPCLogger()
	logger.DocumentRPCLog(w.ctx, w.ctx.Logger, w.ctx.Metrics(), start, err,
	w.method+"/Send", "app_gRPC-Stream_stats")
	
	return err
}
// Client-side streaming specific wrapper
type clientStreamWrapperClientStream struct {
	*instrumentedStream
}

func (w *clientStreamWrapperClientStream) SendAndClose(m *Response) error {
	start := time.Now()
	span := w.ctx.Trace(w.method + "/SendAndClose")
	defer span.End()
	
	err := w.ServerStream.SendMsg(m)
	
	logger := gofrgRPC.NewgRPCLogger()
	logger.DocumentRPCLog(w.ctx, w.ctx.Logger, w.ctx.Metrics(), start, err,
	w.method+"/SendAndClose", "app_gRPC-Stream_stats")
	
	return err
}

func (w *clientStreamWrapperClientStream) Recv() (*Request, error) {
	start := time.Now()
	span := w.ctx.Trace(w.method + "/Recv")
	defer span.End()
	
	var req Request
	err := w.ServerStream.RecvMsg(&req)
	
	logger := gofrgRPC.NewgRPCLogger()
	logger.DocumentRPCLog(w.ctx, w.ctx.Logger, w.ctx.Metrics(), start, err,
	w.method+"/Recv", "app_gRPC-Stream_stats")
	
	return &req, err
}
// Client-side streaming specific wrapper
type clientStreamWrapperBiDiStream struct {
	*instrumentedStream
}

func (w *clientStreamWrapperBiDiStream) SendAndClose(m *Response) error {
	start := time.Now()
	span := w.ctx.Trace(w.method + "/SendAndClose")
	defer span.End()
	
	err := w.ServerStream.SendMsg(m)
	
	logger := gofrgRPC.NewgRPCLogger()
	logger.DocumentRPCLog(w.ctx, w.ctx.Logger, w.ctx.Metrics(), start, err,
	w.method+"/SendAndClose", "app_gRPC-Stream_stats")
	
	return err
}

func (w *clientStreamWrapperBiDiStream) Recv() (*Request, error) {
	start := time.Now()
	span := w.ctx.Trace(w.method + "/Recv")
	defer span.End()
	
	var req Request
	err := w.ServerStream.RecvMsg(&req)
	
	logger := gofrgRPC.NewgRPCLogger()
	logger.DocumentRPCLog(w.ctx, w.ctx.Logger, w.ctx.Metrics(), start, err,
	w.method+"/Recv", "app_gRPC-Stream_stats")
	
	return &req, err
}
// Bidirectional streaming wrapper
type bidiStreamWrapperBiDiStream struct {
	*instrumentedStream
}

func (w *bidiStreamWrapperBiDiStream) Send(m *Response) error {
	start := time.Now()
	span := w.ctx.Trace(w.method + "/Send")
	defer span.End()
	
	err := w.ServerStream.SendMsg(m)
	
	logger := gofrgRPC.NewgRPCLogger()
	logger.DocumentRPCLog(w.ctx, w.ctx.Logger, w.ctx.Metrics(), start, err,
	w.method+"/Send", "app_gRPC-Stream_stats")
	
	return err
}

func (w *bidiStreamWrapperBiDiStream) Recv() (*Request, error) {
	start := time.Now()
	span := w.ctx.Trace(w.method + "/Recv")
	defer span.End()
	
	var req Request
	err := w.ServerStream.RecvMsg(&req)
	
	logger := gofrgRPC.NewgRPCLogger()
	logger.DocumentRPCLog(w.ctx, w.ctx.Logger, w.ctx.Metrics(), start, err,
	w.method+"/Recv", "app_gRPC-Stream_stats")
	
	return &req, err
}

func (w *bidiStreamWrapperBiDiStream) CloseSend() error {
	start := time.Now()
	span := w.ctx.Trace(w.method + "/CloseSend")
	defer span.End()

	err := w.ServerStream.(grpc.ClientStream).CloseSend()

	logger := gofrgRPC.NewgRPCLogger()
	logger.DocumentRPCLog(w.ctx, w.ctx.Logger, w.ctx.Metrics(), start, err,
		w.method+"/CloseSend", "app_gRPC-Stream_stats")

	return err
}


// Server-side streaming handler for ServerStream
func (h *ChatServiceServerWrapper) ServerStream(req *Request, stream ChatService_ServerStreamServer) error {
	ctx := stream.Context()
	gctx := h.getGofrContext(ctx, &RequestWrapper{ctx: ctx, Request: req})
	
	is := &instrumentedStream{
		ServerStream: stream,
		ctx:        gctx,
		method:     "/ChatService/ServerStream",
	}
	
	wrappedStream := &serverStreamWrapperServerStream{instrumentedStream: is}
	return h.server.ServerStream(gctx, wrappedStream)
}
// Client-side streaming handler for ClientStream
func (h *ChatServiceServerWrapper) ClientStream(stream ChatService_ClientStreamServer) error {
	ctx := stream.Context()
	gctx := h.getGofrContext(ctx, nil)
	
	is := &instrumentedStream{
		ServerStream: stream,
		ctx:        gctx,
		method:     "/ChatService/ClientStream",
	}
	
	wrappedStream := &clientStreamWrapperClientStream{instrumentedStream: is}
	return h.server.ClientStream(gctx, wrappedStream)
}
// Bidirectional streaming handler for BiDiStream
func (h *ChatServiceServerWrapper) BiDiStream(stream ChatService_BiDiStreamServer) error {
	ctx := stream.Context()
	gctx := h.getGofrContext(ctx, nil)
	
	is := &instrumentedStream{
		ServerStream: stream,
		ctx:        gctx,
		method:     "/ChatService/BiDiStream",
	}
	
	wrappedStream := &bidiStreamWrapperBiDiStream{instrumentedStream: is}
	return h.server.BiDiStream(gctx, wrappedStream)
}

// mustEmbedUnimplementedChatServiceServer ensures implementation
func (h *ChatServiceServerWrapper) mustEmbedUnimplementedChatServiceServer() {}

// RegisterChatServiceServerWithGofr registers the server
func RegisterChatServiceServerWithGofr(app *gofr.App, srv ChatServiceServerWithGofr) {
	registerServerWithGofr(app, srv, func(s grpc.ServiceRegistrar, srv any) {
		wrapper := &ChatServiceServerWrapper{
			server: srv.(ChatServiceServerWithGofr),
			healthServer: getOrCreateHealthServer(),
		}

		RegisterChatServiceServer(s, wrapper)

		wrapper.Server.SetServingStatus("Hello", healthpb.HealthCheckResponse_SERVING)
	})
}

// getGofrContext creates GoFr context
func (h *ChatServiceServerWrapper) getGofrContext(ctx context.Context, req gofr.Request) *gofr.Context {
	return &gofr.Context{
		Context:   ctx,
		Container: h.Container,
		Request:   req,
	}
}

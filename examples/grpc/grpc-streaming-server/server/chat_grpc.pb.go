// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: chat.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	ServerStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (ChatService_ServerStreamClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (ChatService_ClientStreamClient, error)
	BiDiStream(ctx context.Context, opts ...grpc.CallOption) (ChatService_BiDiStreamClient, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) ServerStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (ChatService_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], "/ChatService/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_ServerStreamClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type chatServiceServerStreamClient struct {
	grpc.ClientStream
}

func (x *chatServiceServerStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (ChatService_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[1], "/ChatService/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceClientStreamClient{stream}
	return x, nil
}

type ChatService_ClientStreamClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type chatServiceClientStreamClient struct {
	grpc.ClientStream
}

func (x *chatServiceClientStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceClientStreamClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) BiDiStream(ctx context.Context, opts ...grpc.CallOption) (ChatService_BiDiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[2], "/ChatService/BiDiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceBiDiStreamClient{stream}
	return x, nil
}

type ChatService_BiDiStreamClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type chatServiceBiDiStreamClient struct {
	grpc.ClientStream
}

func (x *chatServiceBiDiStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceBiDiStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	ServerStream(*Request, ChatService_ServerStreamServer) error
	ClientStream(ChatService_ClientStreamServer) error
	BiDiStream(ChatService_BiDiStreamServer) error
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) ServerStream(*Request, ChatService_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedChatServiceServer) ClientStream(ChatService_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedChatServiceServer) BiDiStream(ChatService_BiDiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BiDiStream not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).ServerStream(m, &chatServiceServerStreamServer{stream})
}

type ChatService_ServerStreamServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type chatServiceServerStreamServer struct {
	grpc.ServerStream
}

func (x *chatServiceServerStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).ClientStream(&chatServiceClientStreamServer{stream})
}

type ChatService_ClientStreamServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type chatServiceClientStreamServer struct {
	grpc.ServerStream
}

func (x *chatServiceClientStreamServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceClientStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatService_BiDiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).BiDiStream(&chatServiceBiDiStreamServer{stream})
}

type ChatService_BiDiStreamServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type chatServiceBiDiStreamServer struct {
	grpc.ServerStream
}

func (x *chatServiceBiDiStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceBiDiStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _ChatService_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _ChatService_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BiDiStream",
			Handler:       _ChatService_BiDiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}

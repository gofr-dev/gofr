// Code generated by gofr.dev/cli/gofr. DO NOT EDIT.
// versions:
// 	gofr-cli v0.7.0
// 	gofr.dev v1.39.0
// 	source: chat.proto

package client

import (
	"gofr.dev/pkg/gofr"
	"gofr.dev/pkg/gofr/metrics"
	"google.golang.org/grpc"
)

type ChatServiceGoFrClient interface {
	ServerStream(ctx *gofr.Context, req *Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Response], error)
	ClientStream(ctx *gofr.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Request, Response], error)
	BiDiStream(ctx *gofr.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Request, Response], error)
	HealthClient
}

type ChatServiceClientWrapper struct {
	client ChatServiceClient
	HealthClient
}

func NewChatServiceGoFrClient(host string, metrics metrics.Manager, dialOptions ...grpc.DialOption) (ChatServiceGoFrClient, error) {
	conn, err := createGRPCConn(host, "ChatService", dialOptions...)
	if err != nil {
		return &ChatServiceClientWrapper{
			client:       nil,
			HealthClient: &HealthClientWrapper{client: nil},
		}, err
	}

	metricsOnce.Do(func() {
		metrics.NewHistogram("app_gRPC-Client_stats", "Response time of gRPC client in milliseconds.", gRPCBuckets...)
		metrics.NewHistogram("app_gRPC-Client-Stream_stats", "Response time of gRPC streaming client in milliseconds.", gRPCBuckets...)
	})

	res := NewChatServiceClient(conn)
	healthClient := NewHealthClient(conn)

	return &ChatServiceClientWrapper{
		client: res,
		HealthClient: healthClient,
	}, nil
}


func (h *ChatServiceClientWrapper) ServerStream(ctx *gofr.Context, req *Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Response], error) {
	result, err := invokeRPC(ctx, "/ChatService/ServerStream", func() (interface{}, error) {
		return h.client.ServerStream(ctx.Context, req, opts...)
	}, "app_gRPC-Client-Stream_stats")

	if err != nil {
		return nil, err
	}
	return result.(grpc.ServerStreamingClient[Response]), nil
}
func (h *ChatServiceClientWrapper) ClientStream(ctx *gofr.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Request, Response], error) {
	result, err := invokeRPC(ctx, "/ChatService/ClientStream", func() (interface{}, error) {
		return h.client.ClientStream(ctx.Context, opts...)
	}, "app_gRPC-Client-Stream_stats")

	if err != nil {
		return nil, err
	}
	return result.(grpc.ClientStreamingClient[Request, Response]), nil
}
func (h *ChatServiceClientWrapper) BiDiStream(ctx *gofr.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Request, Response], error) {
	result, err := invokeRPC(ctx, "/ChatService/BiDiStream", func() (interface{}, error) {
		return h.client.BiDiStream(ctx.Context, opts...)
	}, "app_gRPC-Client-Stream_stats")

	if err != nil {
		return nil, err
	}
	return result.(grpc.BidiStreamingClient[Request, Response]), nil
}

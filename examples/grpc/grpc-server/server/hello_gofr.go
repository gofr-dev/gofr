// Code generated by gofr.dev/cli/gofr. DO NOT EDIT.
package server

import (
	"context"
	"fmt"
	"reflect"
	"time"

	"gofr.dev/pkg/gofr"
	"gofr.dev/pkg/gofr/container"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	"google.golang.org/grpc/health"
	healthpb "google.golang.org/grpc/health/grpc_health_v1"
	gofrGRPC "gofr.dev/pkg/gofr/grpc"
)

type HelloServerWithGofr interface {
	SayHello(*gofr.Context) (any, error)
}

type healthServer struct {
	*health.Server
}

type HelloServerWrapper struct {
	HelloServer
	*healthServer
	Container *container.Container
	server    HelloServerWithGofr
}
func (h *HelloServerWrapper) SayHello(ctx context.Context, req *HelloRequest) (*HelloResponse, error) {
	gctx := h.GetGofrContext(ctx, &HelloRequestWrapper{ctx: ctx, HelloRequest: req})

	res, err := h.server.SayHello(gctx)
	if err != nil {
		return nil, err
	}

	resp, ok := res.(*HelloResponse)
	if !ok {
		return nil, status.Errorf(codes.Unknown, "unexpected response type %T", res)
	}

	return resp, nil
}

func (h *healthServer) Check(ctx *gofr.Context, req *healthpb.HealthCheckRequest) (*healthpb.HealthCheckResponse, error) {
	start := time.Now()
	span := ctx.Trace("check")
	res, err := h.Server.Check(ctx.Context, req)
	gofrGRPC.DocumentRPCLog(ctx.Context, ctx.Logger, ctx.Metrics(), start, err, "/grpc.health.v1.Health/Check", "app_gRPC-Server_stats")
	span.End()
	return res, err
}

func (h *healthServer) Watch(ctx *gofr.Context, in *healthpb.HealthCheckRequest, stream healthpb.Health_WatchServer) error {
	start := time.Now()
	span := ctx.Trace("watch")
	err := h.Server.Watch(in, stream)
	gofrGRPC.DocumentRPCLog(ctx.Context, ctx.Logger, ctx.Metrics(), start, err, "/grpc.health.v1.Health/Watch", "app_gRPC-Server_stats")
	span.End()
	return err
}

func (h *healthServer) SetServingStatus(ctx *gofr.Context, service string, servingStatus healthpb.HealthCheckResponse_ServingStatus) {
	start := time.Now()
	span := ctx.Trace("setServingStatus")
	h.Server.SetServingStatus(service, servingStatus)
	gofrGRPC.DocumentRPCLog(ctx.Context, ctx.Logger, ctx.Metrics(), start, nil, "/grpc.health.v1.Health/SetServingStatus", "app_gRPC-Server_stats")
	span.End()
}

func (h *healthServer) Shutdown(ctx *gofr.Context) {
	start := time.Now()
	span := ctx.Trace("Shutdown")
	h.Server.Shutdown()
	gofrGRPC.DocumentRPCLog(ctx.Context, ctx.Logger, ctx.Metrics(), start, nil, "/grpc.health.v1.Health/Shutdown", "app_gRPC-Server_stats")
	span.End()
}

func (h *healthServer) Resume(ctx *gofr.Context) {
	start := time.Now()
	span := ctx.Trace("Resume")
	h.Server.Resume()
	gofrGRPC.DocumentRPCLog(ctx.Context, ctx.Logger, ctx.Metrics(), start, nil, "/grpc.health.v1.Health/Resume", "app_gRPC-Server_stats")
	span.End()
}

func (h *HelloServerWrapper) mustEmbedUnimplementedHelloServer() {}

func RegisterHelloServerWithGofr(app *gofr.App, srv HelloServerWithGofr) {
	var s grpc.ServiceRegistrar = app

	h := health.NewServer()
	res, _ := srv.(*HelloGoFrServer)
	res.health = &healthServer{h}

	wrapper := &HelloServerWrapper{server: srv, healthServer: res.health}

	gRPCBuckets := []float64{0.005, 0.01, .05, .075, .1, .125, .15, .2, .3, .5, .75, 1, 2, 3, 4, 5, 7.5, 10}
	app.Metrics().NewHistogram("app_gRPC-Server_stats", "Response time of gRPC server in milliseconds.", gRPCBuckets...)

	RegisterHelloServer(s, wrapper)
	healthpb.RegisterHealthServer(s, h)

	h.SetServingStatus("", healthpb.HealthCheckResponse_SERVING)
	h.SetServingStatus("Hello", healthpb.HealthCheckResponse_SERVING)
}

func (h *HelloServerWrapper) GetGofrContext(ctx context.Context, req gofr.Request) *gofr.Context {
	return &gofr.Context{
		Context:   ctx,
		Container: h.Container,
		Request:   req,
	}
}
type HelloRequestWrapper struct {
	ctx context.Context
	*HelloRequest
}

func (h *HelloRequestWrapper) Context() context.Context {
	return h.ctx
}

func (h *HelloRequestWrapper) Param(s string) string {
	return ""
}

func (h *HelloRequestWrapper) PathParam(s string) string {
	return ""
}

func (h *HelloRequestWrapper) Bind(p interface{}) error {
	ptr := reflect.ValueOf(p)
	if ptr.Kind() != reflect.Ptr {
		return fmt.Errorf("expected a pointer, got %T", p)
	}

	hValue := reflect.ValueOf(h.HelloRequest).Elem()
	ptrValue := ptr.Elem()

	for i := 0; i < hValue.NumField(); i++ {
		field := hValue.Type().Field(i)
		if field.Name == "state" || field.Name == "sizeCache" || field.Name == "unknownFields" {
			continue
		}

		if field.IsExported() {
			ptrValue.Field(i).Set(hValue.Field(i))
		}
	}

	return nil
}

func (h *HelloRequestWrapper) HostName() string {
	return ""
}

func (h *HelloRequestWrapper) Params(s string) []string {
	return nil
}

// Code generated by gofr.dev/cli/gofr. DO NOT EDIT.
package client

import (
	"io"
	"fmt"
	"encoding/json"

	"gofr.dev/pkg/gofr"
	"gofr.dev/pkg/gofr/container"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"google.golang.org/grpc/metadata"
)

const (
	statusCodeWidth  = 3
	responseTimeWidth = 11
)

type RPCLog struct {
	ID           string `json:"id"`
StartTime    string `json:"startTime"`
ResponseTime int64  `json:"responseTime"`
Method       string `json:"method"`
StatusCode   int32  `json:"statusCode"`
}

type HelloGoFrClient interface {
	SayHello(*gofr.Context, *HelloRequest) (*HelloResponse, error)
}

type HelloClientWrapper struct {
	client    HelloClient
	Container *container.Container
	HelloGoFrClient
}

func createGRPCConn(host string) (*grpc.ClientConn, error) {
	conn, err := grpc.Dial(host, grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		return nil, err
	}
	return conn, nil
}

func NewHelloGoFrClient(host string) (*HelloClientWrapper, error) {
	conn, err := createGRPCConn(host)
	if err != nil {
		return &HelloClientWrapper{client: nil}, err
	}

	res := NewHelloClient(conn)
	return &HelloClientWrapper{
		client: res,
	}, nil
}
func (h *HelloClientWrapper) SayHello(ctx *gofr.Context, req *HelloRequest) (*HelloResponse, error) {
	span := ctx.Trace("gRPC-srv-call: SayHello")
	defer span.End()

	traceID := span.SpanContext().TraceID().String()
	spanID := span.SpanContext().SpanID().String()
	md := metadata.Pairs("x-gofr-traceid", traceID, "x-gofr-spanid", spanID)

	ctx.Context = metadata.NewOutgoingContext(ctx.Context, md)

	var header metadata.MD

	res, err := h.client.SayHello(ctx.Context, req, grpc.Header(&header))
	if err != nil {
		return nil, err
	}

	log := &RPCLog{}

	if values, ok := header["log"]; ok && len(values) > 0 {
		errUnmarshal := json.Unmarshal([]byte(values[0]), log)
		if errUnmarshal != nil {
			return nil, fmt.Errorf("error while unmarshaling: %v", errUnmarshal)
		}
	}

	ctx.Logger.Info(log)

	return res, err
}

func (l RPCLog) PrettyPrint(writer io.Writer) {
	fmt.Fprintf(writer, "\u001B[38;5;8m%s \u001B[38;5;%dm%-*d"+
		"\u001B[0m %*d\u001B[38;5;8mÂµs\u001B[0m %s\n",
		l.ID, colorForGRPCCode(l.StatusCode),
		statusCodeWidth, l.StatusCode,
		responseTimeWidth, l.ResponseTime,
		l.Method)
}

func colorForGRPCCode(s int32) int {
	const (
		blue = 34
		red  = 202
	)

	if s == 0 {
		return blue
	}

	return red
}

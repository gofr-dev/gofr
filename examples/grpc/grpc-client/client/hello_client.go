// Code generated by gofr.dev/cli/gofr. DO NOT EDIT.
package client

import (
	"gofr.dev/pkg/gofr"
	"gofr.dev/pkg/gofr/container"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"google.golang.org/grpc/metadata"
)

type HelloGoFrClient interface {
	SayHello(*gofr.Context, *HelloRequest) (*HelloResponse, error)
}

type HelloClientWrapper struct {
	client    HelloClient
	Container *container.Container
	HelloGoFrClient
}

func createGRPCConn(host string) (*grpc.ClientConn, error) {
	conn, err := grpc.Dial(host, grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		return nil, err
	}
	return conn, nil
}

func NewHelloGoFrClient(host string) (*HelloClientWrapper, error) {
	conn, err := createGRPCConn(host)
	if err != nil {
		return &HelloClientWrapper{client: nil}, err
	}

	res := NewHelloClient(conn)
	return &HelloClientWrapper{
		client: res,
	}, nil
}
func (h *HelloClientWrapper) SayHello(ctx *gofr.Context, req *HelloRequest) (*HelloResponse, error) {
	span := ctx.Trace("gRPC-srv-call: SayHello")
	defer span.End()

	traceID := span.SpanContext().TraceID().String()
	spanID := span.SpanContext().SpanID().String()
	md := metadata.Pairs("x-gofr-traceid", traceID, "x-gofr-spanid", spanID)

	ctx.Context = metadata.NewOutgoingContext(ctx.Context, md)

	return h.client.SayHello(ctx.Context, req)
}

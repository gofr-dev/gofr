name: CI Pipeline
permissions:
  contents: read

on:
  push:
    branches: [main, development, fix/test_coverage]
    paths-ignore: ['docs/**']
  pull_request:
    branches: [main, development]
    paths-ignore: ['docs/**']

env:
  GO_VERSION: '1.24'  # Primary version for coverage and artifacts
  TEST_VERSIONS: ['1.24', '1.23', '1.22']
  COVERAGE_THRESHOLDS:
    EXAMPLE: 80
    PKG: 90
    SUBMODULE: 85

jobs:
  unit-tests:
    name: Unit Tests (v${{ matrix.go-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ${{ env.TEST_VERSIONS }}
        component: ['example', 'pkg', 'submodule']
      fail-fast: false
      # Avoid running submodule tests for all components
      exclude:
        - component: 'submodule'
          go-version: '1.23'
        - component: 'submodule'
          go-version: '1.22'

    services:
      kafka:
        if: matrix.component == 'example'
        image: bitnami/kafka:3.4
        ports: ["9092:9092"]
        env: {KAFKA_ENABLE_KRAFT: yes, KAFKA_CFG_PROCESS_ROLES: broker,controller, ALLOW_PLAINTEXT_LISTENER: yes}

      redis:
        if: matrix.component == 'example'
        image: redis:7.0.5
        ports: ["2002:6379"]
        options: "--entrypoint redis-server"

      mysql:
        if: matrix.component == 'example'
        image: mysql:8.2.0
        ports: ["2001:3306"]
        env: {MYSQL_ROOT_PASSWORD: "password", MYSQL_DATABASE: "test"}

    steps:
      - uses: actions/checkout@v4
        with: {fetch-depth: 0}

      - uses: actions/setup-go@v5
        with: {go-version: ${{ matrix.go-version }}}

      - name: Setup Test Environment
        if: matrix.component == 'example'
        run: docker run -d -p 2005:9411 openzipkin/zipkin:latest

      - name: Run Tests
        run: |
          case "${{ matrix.component }}" in
            "example")
              go test ./examples/... -coverprofile=profile.cov
              ;;
            "pkg")
              go test ./pkg/... -coverprofile=profile.cov
              ;;
            "submodule")
              mkdir -p coverage_reports
              find pkg -name "go.mod" -exec sh -c '
                dir=$(dirname {})
                cd $dir
                module_name=$(echo $dir | tr "/" "_")
                go test ./... -coverprofile=${module_name}.cov
                cp ${module_name}.cov ../../coverage_reports/
              ' \;
              ;;
          esac

      - name: Upload Coverage
        if: matrix.go-version == env.GO_VERSION
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.component }}-coverage
          path: ${{ matrix.component == 'submodule' && 'coverage_reports/*.cov' || 'profile.cov' }}
          retention-days: 1

  coverage-report:
    name: Coverage Report
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with: {path: artifacts}

      - name: Process Coverage
        run: |
          # Process each component's coverage
          for component in example pkg submodule; do
            if [ -d "artifacts/${component}-coverage" ]; then
              if [ "$component" = "submodule" ]; then
                echo "mode: set" > combined.cov
                for cov_file in artifacts/${component}-coverage/*.cov; do
                  tail -n +2 "$cov_file" >> combined.cov
                done
                coverage=$(go tool cover -func=combined.cov | grep total | awk '{print $3}')
              else
                coverage=$(go tool cover -func=artifacts/${component}-coverage/profile.cov | grep total | awk '{print $3}')
              fi
              echo "${component^^}_COVERAGE=$coverage" >> $GITHUB_ENV
            fi
          done

          # Print summary
          echo "ðŸ“Š Test Coverage Summary ðŸ“Š"
          echo "=========================="
          echo "Examples:    ${EXAMPLE_COVERAGE:-N/A}"
          echo "PKG:         ${PKG_COVERAGE:-N/A}"
          echo "Submodules:  ${SUBMODULE_COVERAGE:-N/A}"
          echo "=========================="

          # Check thresholds
          for component in example pkg submodule; do
            var="${component^^}_COVERAGE"
            threshold="${COVERAGE_THRESHOLDS[${component^^}]}"
            if [ -n "${!var}" ] && [ $(echo "${!var}" | sed 's/%//') -lt $threshold ]; then
              echo "::error::${component} coverage ${!var} below ${threshold}% threshold!"
              exit 1
            fi
          done

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with: {go-version: env.GO_VERSION}

      - name: Run Linters
        run: |
          # Install linters
          go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.1
          
          # Lint root module
          golangci-lint run --timeout=5m
          
          # Lint submodules
          find pkg -name "go.mod" -exec sh -c '
            echo "Linting $(dirname {})"
            cd $(dirname {})
            golangci-lint run --timeout 9m
          ' \;

  upload-coverage:
    name: Upload Coverage
    needs: unit-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/development'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with: {path: artifacts}

      - name: Merge and Upload Coverage
        run: |
          echo "mode: set" > merged.cov
          for component in example pkg; do
            if [ -f "artifacts/${component}-coverage/profile.cov" ]; then
              tail -n +2 "artifacts/${component}-coverage/profile.cov" >> merged.cov
            fi
          done
          
          # Upload to Code Climate
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t gocov -o codeclimate.json merged.cov
          ./cc-test-reporter upload-coverage -i codeclimate.json
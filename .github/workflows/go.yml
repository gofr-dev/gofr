name: GoFR Test Pipeline
on:
  push:
    branches: [main, development, fix-test-coverage]
    paths-ignore: ['docs/**']
  pull_request:
    branches: [main, development]
    paths-ignore: ['docs/**']

jobs:
  Example-Unit-Testing:
    name: Example Tests (v${{ matrix.go-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.24', '1.23', '1.22']
      fail-fast: false

    services:
      redis:
        image: redis:7.0.5
        ports: ["2002:6379"]
      mysql:
        image: mysql:8.2.0
        ports: ["2001:3306"]
        env:
          MYSQL_ROOT_PASSWORD: "password"
          MYSQL_DATABASE: "test"
      kafka:
        image: bitnami/kafka:3.4
        ports: ["9092:9092"]
        env:
          KAFKA_ENABLE_KRAFT: "yes"
          KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://127.0.0.1:9092"
          ALLOW_PLAINTEXT_LISTENER: "yes"
      zipkin:
        image: openzipkin/zipkin:latest
        ports: ["2005:9411"]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Run tests with retry
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 5
          command: |
            set -eo pipefail
            export APP_ENV=test
            ./test_examples.sh

      - name: Upload coverage
        if: matrix.go-version == '1.24'
        uses: actions/upload-artifact@v4
        with:
          name: examples-coverage
          path: examples_filtered.cov

  PKG-Unit-Testing:
    name: PKG Tests (v${{ matrix.go-version }})
    runs-on: ubuntu-latest
    needs: Example-Unit-Testing
    strategy:
      matrix:
        go-version: ['1.24', '1.23', '1.22']
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Run tests with retry
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 5
          command: |
            set -eo pipefail
            export APP_ENV=test
            ./test_pkg.sh

      - name: Upload coverage
        if: matrix.go-version == '1.24'
        uses: actions/upload-artifact@v4
        with:
          name: pkg-coverage
          path: pkg_coverage.cov

  Submodule-Unit-Testing:
    name: Submodule Tests (v${{ matrix.go-version }})
    runs-on: ubuntu-latest
    needs: PKG-Unit-Testing
    strategy:
      matrix:
        go-version: ['1.24', '1.23', '1.22']
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Run tests with retry
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 10  # Longer timeout for parallel submodule tests
          command: |
            set -eo pipefail
            export APP_ENV=test
            ./test_submodules.sh

      - name: Upload coverage
        if: matrix.go-version == '1.24'
        uses: actions/upload-artifact@v4
        with:
          name: submodules-coverage
          path: combined.cov

  coverage:
    name: Process Coverage
    runs-on: ubuntu-latest
    needs: [Example-Unit-Testing, PKG-Unit-Testing, Submodule-Unit-Testing]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Merge coverage
        run: |
          echo "mode: atomic" > merged.cov
          [ -f artifacts/examples-coverage/examples_filtered.cov ] && tail -n +2 artifacts/examples-coverage/examples_filtered.cov >> merged.cov
          [ -f artifacts/pkg-coverage/pkg_coverage.cov ] && tail -n +2 artifacts/pkg-coverage/pkg_coverage.cov >> merged.cov
          [ -f artifacts/submodules-coverage/combined.cov ] && tail -n +2 artifacts/submodules-coverage/combined.cov >> merged.cov

          echo "üìä Combined Coverage:"
          go tool cover -func merged.cov
          TOTAL_COVERAGE=$(go tool cover -func merged.cov | grep total | awk '{print $3}')
          echo "CODE_COVERAGE=${TOTAL_COVERAGE}" >> $GITHUB_ENV

      - name: Upload to CodeClimate
        if: github.ref == 'refs/heads/development' && github.event_name == 'push'
        uses: paambaati/codeclimate-action@v9.0.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageLocations: merged.cov:gocov
          prefix: gofr.dev

  # Job for code quality checks
  code_quality:
    name: Code QualityüéñÔ∏è
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: false

      # Install the linting tool
      - name: Install golangci-lint
        run: |
          go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.1

      - name: Get dependencies
        run: |
          go mod tidy

      # Run linter on the root module
      - name: Lint Root Module
        run: |
          golangci-lint run --output.text.print-issued-lines --output.text.colors=true --show-stats=false --timeout=5m

      # Run linter on each submodule
      - name: Lint Submodules
        run: |
          echo "Searching for submodules..."
          total_errors=0  # Initialize error counter
          for module in $(find pkg -name "go.mod" -exec dirname {} \;); do
            echo "Linting submodule: $module"
            # Change directory to the submodule and run golangci-lint
            cd $module
            go mod tidy
            golangci-lint run --output.text.print-issued-lines --output.text.colors=true --show-stats=false --timeout 9m0s || total_errors=$((total_errors + 1))
            cd -  # Return to the root directory
          done
          echo "Total submodule lint errors: $total_errors"
          if [ $total_errors -gt 0 ]; then
            echo "Linting failed for $total_errors submodule(s)."
            exit 1  # Fail the job if there are linting errors in submodules
          fi

  # Job for checking filename conventions
  linting_party:
    name: Linting Partyü•≥
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version: 1.24

      # Check file naming conventions using ls-lint
      - name: Check for file names errors
        uses: ls-lint/action@v2.3.1
        with:
          config: .ls-lint.yml
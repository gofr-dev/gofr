name: Workflow-Pipeline

on:
  push:
    branches:
      - main
      - development
    tags:
      - "*"
  pull_request:
    branches:
      - main
      - development

jobs:
  Unit-Tests:
    name: Unit Tests🛠
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0.31
        ports:
          - "3306:3306"
        env:
          MYSQL_ROOT_PASSWORD: "password"
          MYSQL_DATABASE: "test"

      redis:
        image: redis:7.0.5
        ports:
          - "6379:6379"
        options: "--entrypoint redis-server"

      zipkin:
        image: openzipkin/zipkin:2
        ports:
          - "9411:9411"

      elasticsearch:
        image: elasticsearch:6.8.6
        ports:
          - 2012:9200
          - 2013:9300
          - 9200:9200
        env:
          discovery type: "single-node"

      kafka:
        image: krisgeus/docker-kafka
        ports:
          - 2008:2008
          - 2009:2009
        env:
          ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:2008,INTERNAL://localhost:2009'
          LISTENERS: 'PLAINTEXT://0.0.0.0:2008,INTERNAL://0.0.0.0:2009'
          SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT'
          INTER_BROKER: 'INTERNAL'
          KAFKA_CREATE_TOPICS: 'test-topic'
          KAFKA_HOSTS: 'localhost:2008,localhost:2009'
          KAFKA_TOPIC: 'test-topic'

      mongo:
        image: mongo:6.0.2
        ports:
          - "27017:27017"
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: admin123

      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        ports:
          - "1433:1433"
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: reallyStrongPwd123

      dynamodb:
        image: amazon/dynamodb-local:1.22.0
        ports:
          - "2021:8000"

      postgres:
        image: postgres:15.1
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: test

    steps:
      - name: Checkout code into go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up  Go 1.21
        uses: actions/setup-go@v4
        with:
          go-version: 1.21
        id: Go

      - name: Set up SSL Enabled MySQL
        run: |
          docker run --name gofr-ssl-mysql -e MYSQL_ROOT_PASSWORD=password -p 2001:3306 -d mysql:8.0.31
          docker cp ${{ github.workspace }}/.github/setups/certFiles gofr-ssl-mysql:/usr/certFiles
          docker cp ${{ github.workspace }}/.github/setups/my.cnf gofr-ssl-mysql:/etc/my.cnf
          docker exec -i gofr-ssl-mysql chown -Rf mysql. /usr/certFiles
          docker restart gofr-ssl-mysql

      - name: Get dependencies
        run: |
          go mod download

      - name: Load Schema of Solr
        run: |
          docker run -d --name solr -p 8983:8983 solr:8 -DzkRun;
          sleep 10s;
          docker exec -i solr sh < .github/setups/solrSchema.sh;
        timeout-minutes: 5

      - name: Yugabyte setup
        uses: yugabyte/yugabyte-db-action@master
        with:
          yb_image_tag: 2.14.5.0-b18
          yb_master_ui_port: 7000
          yb_tserver_ui_port: 6000
          ysql_port: 5433
          ycql_port: 9042

      - name: Setup Google PubSub
        run: |
          docker pull gcr.io/google.com/cloudsdktool/google-cloud-cli:emulators
          docker run --name=gcloud-emulator -d -p 8086:8086 \
          gcr.io/google.com/cloudsdktool/google-cloud-cli:emulators gcloud beta emulators pubsub start --project=test123 \
          --host-port=0.0.0.0:8086    

      - name: Setup SFTP Server
        run: |
          mkdir $HOME/sftpData
          chmod -R 777 $HOME/sftpData
          docker run --name gofr-sftp -v $HOME/upload:/home/myuser -p 2222:22 -d atmoz/sftp myuser:mypass:1001

      - name: Setup FTP Server
        run: |
          mkdir $HOME/ftpData
          chmod -R 777 $HOME/ftpData
          docker run -d --name gofr-ftp -v $HOME/ftpData:/home/vsftpd -p 20:20 -p 21:21 -p 21100-21110:21100-21110 -e FTP_USER=myuser \
          -e FTP_PASS=mypass -e PASV_ADDRESS=127.0.0.1 -e PASV_MIN_PORT=21100 -e PASV_MAX_PORT=21110 fauria/vsftpd

      - name: Test
        run: |
          export GOFR_ENV=test
          go test ./... -skip 'Test_YCQL_*'/'Test_CQL_*'/'Test_PubSub_*' --tags=integration -v -coverprofile profile.cov -coverpkg=./..
          go tool cover -func profile.cov

      - name: Upload coverage report to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage-reports
          path: ./profile.cov

  code_quality:
    name: Code Quality🎖️
    runs-on: ubuntu-latest
    container: "golangci/golangci-lint:v1.52.2"
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Get dependencies
        run: go get -v -t -d ./...
      - name: GolangCI-Lint
        run: |
          golangci-lint run --timeout 9m0s

  yugabyte_test:
    name: YugaByte and Cassandra Tests 🛠
    runs-on: ubuntu-latest
    services:
      cassandra:
        image: cassandra:4.1
        ports:
          - 9041:9042
        options: --health-cmd "cqlsh --debug"
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: go get -v -t -d ./...

      - name: Yugabyte setup
        uses: yugabyte/yugabyte-db-action@master
        with:
          yb_image_tag: 2.14.5.0-b18
          yb_master_ui_port: 7000
          yb_tserver_ui_port: 6000
          ysql_port: 5433
          ycql_port: 9042

      - name: Load Schema of YCQL
        run: |
          temp=$(sudo docker ps | grep yugabyte | awk '{print $1}');
          docker exec -i $temp /home/yugabyte/bin/ycqlsh < .github/setups/keyspace.ycql;

      - name: Load Schema of Cassandra
        run: |
          docker exec -i ${{ job.services.cassandra.id }} cqlsh --debug  < .github/setups/keyspace.cql

      - name: Test
        run: |
          export GOFR_ENV=test
          go test ./... -run 'Test_YCQL_*'/'Test_CQL_*' -v -coverprofile cql.cov -coverpkg=./..

      - name: Upload coverage report to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage-reports
          path: ./cql.cov

  pubsub_test:
    name: PubSub Tests 🛠
    runs-on: ubuntu-latest
    services:
      kafka:
        image: krisgeus/docker-kafka
        ports:
          - 2008:2008
          - 2009:2009
        env:
          ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:2008,INTERNAL://localhost:2009'
          LISTENERS: 'PLAINTEXT://0.0.0.0:2008,INTERNAL://0.0.0.0:2009'
          SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT'
          INTER_BROKER: 'INTERNAL'
          KAFKA_CREATE_TOPICS: 'test-topic'
          KAFKA_HOSTS: 'localhost:2008,localhost:2009'
          KAFKA_TOPIC: 'test-topic'
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: go get -v -t -d ./...

      - name: Setup Google PubSub
        run: |
          docker pull gcr.io/google.com/cloudsdktool/google-cloud-cli:emulators
          docker run --name=gcloud-emulator -d -p 8086:8086 \
          gcr.io/google.com/cloudsdktool/google-cloud-cli:emulators gcloud beta emulators pubsub start --project=test123 \
          --host-port=0.0.0.0:8086

      - name: Test
        run: |
          export GOFR_ENV=test
          go test ./... -run 'Test_PubSub_*' -v -coverprofile pubsub.cov -coverpkg=./.. 

      - name: Upload coverage report to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage-reports
          path: ./pubsub.cov


  upload_coverage_to_code_climate:
    name: Upload Coverage to Code Climate
    runs-on: ubuntu-latest
    needs: [Unit-Tests,pubsub_test,yugabyte_test]
    steps:
        - uses: actions/download-artifact@v2
          with:
            name: coverage-reports
            path: ./coverage-reports

        - name: Combine coverage reports
          run: go tool cover -merge profile.cov cql.cov pubsub.cov -o combined.cov

        - name: Upload coverage report to Code Climate
          uses: paambaati/codeclimate-action@v5.0.0
          env:
            CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
          with:
            debug: true
            coverageLocations: combined.cov:gocov
            prefix: gofr.dev
name: Workflow-Pipeline
permissions:
  contents: read

on:
  push:
    branches:
      - main
      - development
    paths-ignore:
      - 'docs/**'
  pull_request:
    branches:
      - main
      - development
    paths-ignore:
      - 'docs/**'

jobs:
  Example-Unit-Testing:
    name: Example Unit Testing (v${{ matrix.go-version }})üõ†
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.24','1.23', '1.22']
      fail-fast: false

    services:
      kafka:
        image: bitnami/kafka:3.4
        ports:
          - "9092:9092"
        env:
          KAFKA_ENABLE_KRAFT: yes
          KAFKA_CFG_PROCESS_ROLES: broker,controller
          KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
          KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
          KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
          KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
          KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
          KAFKA_BROKER_ID: 1
          KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@127.0.0.1:9093
          ALLOW_PLAINTEXT_LISTENER: yes
          KAFKA_CFG_NODE_ID: 1

      redis:
        image: redis:7.0.5
        ports:
          - "2002:6379"
        options: "--entrypoint redis-server"

      mysql:
        image: mysql:8.2.0
        ports:
          - "2001:3306"
        env:
          MYSQL_ROOT_PASSWORD: "password"
          MYSQL_DATABASE: "test"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Get dependencies
        run: go mod download

      - name: Start Zipkin
        run: docker run -d -p 2005:9411 openzipkin/zipkin:latest

      - name: Test with Retry Logic
        id: test
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 2
          command: |
            export APP_ENV=test
            go test gofr.dev/examples/... -v -short -coverprofile packageWithpbgo.cov -coverpkg=gofr.dev/examples/...
            grep -vE '^gofr\.dev\/.*(\.pb\.go|hello\.proto|hello_grpc\.pb\.go|health_client\.go|hello_client\.go|hello_gofr\.go|health_gofr\.go)' packageWithpbgo.cov > profile.cov
            go tool cover -func profile.cov

      - name: Upload Test Coverage
        if: ${{ matrix.go-version == '1.24'}}
        uses: actions/upload-artifact@v4
        with:
          name: Example-Coverage
          path: profile.cov
          retention-days: 1

  PKG-Unit-Testing:
    name: PKG Unit Testing (v${{ matrix.go-version }})üõ†
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.24','1.23', '1.22']
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Get dependencies
        run: go mod download

      - name: Test with Retry Logic
        id: test
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 2
          command: |
            export APP_ENV=test
            cd pkg
            go test ./... -v -short -coverprofile package.cov -coverpkg=./...
            grep -v '/mock_' package.cov > profile.cov
            mv profile.cov ../profile.cov
            go tool cover -func ../profile.cov

      - name: Upload Test Coverage
        if: ${{ matrix.go-version == '1.24'}}
        uses: actions/upload-artifact@v4
        with:
          name: PKG-Coverage
          path: profile.cov
          retention-days: 1

  Submodule-Unit-Testing:
    name: Submodule Unit Testing (v${{ matrix.go-version }})üõ†
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.24','1.23', '1.22']
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Detect Submodules
        id: detect_submodules
        run: |
          SUBMODULES=$(find pkg -name "go.mod" -exec dirname {} \; | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "submodules=$SUBMODULES" >> $GITHUB_OUTPUT

      - name: Test Submodules
        id: test_submodules
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 2
          command: |
            export APP_ENV=test
            mkdir -p coverage_reports
            SUBMODULES='${{ steps.detect_submodules.outputs.submodules }}'
            echo $SUBMODULES | jq -c '.[]' | xargs -I{} -P 4 bash -c '
              module={}
              cd $module
              module_name=$(echo $module | tr "/" "_")
              go mod download
              go mod tidy
              go test ./... -v -short -coverprofile=${module_name}.cov -coverpkg=./...
              cp ${module_name}.cov ../../../coverage_reports/
              cd -
            '

      - name: Upload Coverage Reports
        if: ${{ matrix.go-version == '1.24'}}
        uses: actions/upload-artifact@v4
        with:
          name: Submodule-Coverage
          path: coverage_reports/*.cov
          retention-days: 1

  coverage_report:
    name: Coverage Reportüìã
    runs-on: ubuntu-latest
    needs: [Example-Unit-Testing, PKG-Unit-Testing, Submodule-Unit-Testing]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download Coverage Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Calculate Example Coverage
        id: example_coverage
        working-directory: artifacts/Example-Coverage
        run: |
          coverage=$(go tool cover -func=profile.cov | grep total | awk '{print $3}')
          echo "EXAMPLE_COVERAGE=$coverage" >> $GITHUB_ENV
          echo "Example Coverage: $coverage"

      - name: Calculate PKG Coverage
        id: pkg_coverage
        working-directory: artifacts/PKG-Coverage
        run: |
          coverage=$(go tool cover -func=profile.cov | grep total | awk '{print $3}')
          echo "PKG_COVERAGE=$coverage" >> $GITHUB_ENV
          echo "PKG Coverage: $coverage"

      - name: Calculate Submodule Coverage
        id: submodule_coverage
        working-directory: artifacts/Submodule-Coverage
        run: |
          echo "mode: set" > combined.cov
          for cov_file in *.cov; do
            tail -n +2 "$cov_file" >> combined.cov
          done
          coverage=$(go tool cover -func=combined.cov | grep total | awk '{print $3}')
          echo "SUBMODULE_COVERAGE=$coverage" >> $GITHUB_ENV
          echo "Submodule Coverage: $coverage"

      - name: Print Coverage Summary
        run: |
          echo "üìä Test Coverage Summary üìä"
          echo "=========================="
          echo "Examples:    ${{ env.EXAMPLE_COVERAGE }}"
          echo "PKG:         ${{ env.PKG_COVERAGE }}"
          echo "Submodules:  ${{ env.SUBMODULE_COVERAGE }}"
          echo "=========================="

      - name: Set Minimum Coverage Thresholds
        run: |
          if (( $(echo "${{ env.EXAMPLE_COVERAGE }}" | sed 's/%//') < 80 )); then
            echo "Examples coverage below 80% threshold!"
            exit 1
          fi
          if (( $(echo "${{ env.PKG_COVERAGE }}" | sed 's/%//') < 90 )); then
            echo "PKG coverage below 90% threshold!"
            exit 1
          fi
          if (( $(echo "${{ env.SUBMODULE_COVERAGE }}" | sed 's/%//') < 85 )); then
            echo "Submodules coverage below 85% threshold!"
            exit 1
          fi

  upload_coverage:
    name: Upload Coverageüìä
    runs-on: ubuntu-latest
    needs: [Example-Unit-Testing, PKG-Unit-Testing]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/development'}}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download Coverage Report
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Merge Coverage Files
        working-directory: artifacts
        run: |
          echo "mode: set" > merged_profile.cov
          tail -n +2 ./Example-Coverage/profile.cov >> merged_profile.cov
          tail -n +2 ./PKG-Coverage/profile.cov >> merged_profile.cov
          go tool cover -func=merged_profile.cov | tail -n 1

      - name: Upload
        uses: paambaati/codeclimate-action@v9.0.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageLocations: artifacts/merged_profile.cov:gocov
          prefix: gofr.dev

  code_quality:
    name: Code QualityüéñÔ∏è
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: false

      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.1

      - name: Get dependencies
        run: go mod tidy

      - name: Lint Root Module
        run: golangci-lint run --output.text.print-issued-lines --output.text.colors=true --show-stats=false --timeout=5m

      - name: Lint Submodules
        run: |
          total_errors=0
          for module in $(find pkg -name "go.mod" -exec dirname {} \;); do
            echo "Linting submodule: $module"
            cd $module
            go mod tidy
            golangci-lint run --output.text.print-issued-lines --output.text.colors=true --show-stats=false --timeout 9m0s || total_errors=$((total_errors + 1))
            cd -
          done
          if [ $total_errors -gt 0 ]; then exit 1; fi

  linting_party:
    name: Linting Partyü•≥
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24

      - name: Check for file names errors
        uses: ls-lint/action@v2.3.0
        with:
          config: .ls-lint.yml
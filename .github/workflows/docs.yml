name: Build and Deploy
'on':
  push:
    paths:
      - 'docs/**'
env:
  APP_NAME: gofr-web
  REGISTRY: gcr.io
  WEBSITE_REGISTRY: ghcr.io
  GCR_PROJECT: zs-products
  CLUSTER_NAME: products-cluster
  DEPLOYMENT_ZONE: us-central1
  STAGE_NAMESPACE: gofr-stage
  PROD_NAMESPACE: gofr
jobs:
  dockerize_stage:
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/development' || github.ref == 'refs/heads/main' || github.event_name == 'pull_request' )
    outputs:
      image: ${{ steps.output-image.outputs.image }}
    name: 🐳 Dockerize Stage
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: _json_key
          password: ${{ secrets.GCR_KEY }}

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.WEBSITE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download UI Image
        run: |
          docker pull ${{ env.WEBSITE_REGISTRY }}/gofr-dev/website:latest

      - name: Build and Push Image Stage
        uses: docker/build-push-action@v4
        with:
          push: true
          context: ./
          file: ./docs/Dockerfile
          tags: ${{ env.REGISTRY }}/${{ env.GCR_PROJECT }}/${{ env.APP_NAME }}:${{ github.sha }}

      - id: output-image
        run: echo "image=`echo ${{ env.REGISTRY }}/${{ env.GCR_PROJECT }}/${{ env.APP_NAME }}:${{ github.sha }}`" >> "$GITHUB_OUTPUT"

  stage_deployment:
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Stage
    if: (github.ref == 'refs/heads/development' || github.ref == 'refs/heads/main')
    needs: dockerize_stage
    container:
      image: ghcr.io/zopsmart/gha-images:deployments-0.1.3
      options: --rm
    env:
      image: ${{needs.dockerize_stage.outputs.image}}

    steps:
      - name: Authorize to GCP service account
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DEPLOY_KEY }}

      - name: Set GCloud Project and Fetch Cluster Credentials
        run:
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --zone=${{ env.DEPLOYMENT_ZONE }} --project=${{ env.GCR_PROJECT }}

      - name: Update Deployment Image
        run: kubectl set image deployment/${{ env.APP_NAME }} ${{ env.APP_NAME }}=${{ env.image }} --namespace ${{ env.STAGE_NAMESPACE }}

  check-tag:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/v')}}
    outputs:
      tag_exists: ${{ steps.tag-check.outputs.tag_exists }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authorize to GCP service account
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCR_KEY }}

      - name: Check if tag exists
        id: tag-check
        run: |
          if gcloud container images describe ${{ env.REGISTRY }}/${{ env.GCR_PROJECT }}/${{ env.APP_NAME }}:${{ github.sha }} 2>/dev/null; then
              echo "tag_exists=true" >> "$GITHUB_OUTPUT"
          else
              echo "tag_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Print commit has value
        run: |
          echo "${{ github.sha }}"

      - name: Print tag_exists value
        run: |
          echo "${{ steps.tag-check.outputs.tag_exists }}"

  dockerize_prod:
    runs-on: ubuntu-latest
    needs: check-tag
    name: 🐳 Dockerize Prod
    if: ${{ needs.check-tag.outputs.tag_exists == 'true' }}
    outputs:
      image: ${{ steps.output-image.outputs.image }}

    steps:
      - name: Extract Release Tag
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: _json_key
          password: ${{ secrets.GCR_KEY }}

      - name: Re tag and Push Docker Image to GCR
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.GCR_PROJECT }}/${{ env.APP_NAME }}:${{ github.sha }}
          docker tag ${{ env.REGISTRY }}/${{ env.GCR_PROJECT }}/${{ env.APP_NAME }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.GCR_PROJECT }}/${{ env.APP_NAME }}:${{ env.RELEASE_VERSION }}
          docker push ${{ env.REGISTRY }}/${{ env.GCR_PROJECT }}/${{ env.APP_NAME }}:${{ env.RELEASE_VERSION }}

      - id: output-image
        run: echo "image=`echo ${{ env.REGISTRY }}/${{ env.GCR_PROJECT }}/${{ env.APP_NAME }}:${{ env.RELEASE_VERSION }}`" >> "$GITHUB_OUTPUT"

  prod_deployment:
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Prod
    needs: dockerize_prod
    container:
      image: ghcr.io/zopsmart/gha-images:deployments-0.1.3
      options: --rm
    env:
      image: ${{needs.dockerize_prod.outputs.image}}
    steps:
      - name: Authorize to GCP service account
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DEPLOY_KEY }}

      - name: Set GCloud Project and Fetch Cluster Credentials
        run: gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --zone=${{ env.DEPLOYMENT_ZONE }} --project=${{ env.GCR_PROJECT }}

      - name: Update Deployment Image
        run: kubectl set image deployment/${{ env.APP_NAME }} ${{ env.APP_NAME }}=${{ env.image }} --namespace ${{ env.PROD_NAMESPACE }}
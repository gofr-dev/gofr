---
linters-settings:
  dupl:
    threshold: 100
  exhaustive:
    default-signifies-exhaustive: false
  funlen:
    lines: 100
    statements: 50
  gci:
    sections:
      - standard
      - default
      - localmodule
  goconst:
    min-len: 2
    min-occurrences: 2
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral
      - whyNoLint
      - wrapperFunc
  gocyclo:
    min-complexity: 10
  goimports:
    local-prefixes: github.com/golangci/golangci-lint
  golint:
    min-confidence: 0
  mnd:
    checks:
      - argument
      - case
      - condition
      - return
  govet:
    enable:
      - shadow
    settings:
      printf:
        funcs:
          - (gofr.dev/pkg/gofr/Logger).Logf
          - (gofr.dev/pkg/gofr/Logger).Errorf
  lll:
    line-length: 140
  maligned:
    suggest-new: true
  misspell:
    locale: US
  nolintlint:
    allow-unused: false # report any unused nolint directives
    require-explanation: true # require an explanation for nolint directives
    require-specific: true # require nolint directives to be specific about which linter is being skipped
  revive:
    rules:
    # default revive rules, they have to be present otherwise they are disabled
      - name: blank-imports
      - name: context-as-argument
      - name: context-keys-type
      - name: dot-imports
      - name: empty-block
      - name: error-naming
      - name: error-return
      - name: error-strings
      - name: errorf
      - name: increment-decrement
      - name: indent-error-flow
      - name: range
      - name: receiver-naming
      - name: redefines-builtin-id
      - name: superfluous-else
      - name: time-naming
      - name: unexported-return
      - name: unreachable-code
      - name: unused-parameter
      - name: var-declaration
      - name: var-naming
    # additional revive rules
      - name: bare-return
      - name: bool-literal-in-expr
      - name: comment-spacings
      - name: early-return
      - name: defer
      - name: deep-exit
      - name: unused-receiver

linters:
  # please, do not use `enable-all`: it's deprecated and will be removed soon.
  # inverted configuration with `enable-all` and `disable` is not scalable during updates of golangci-lint
  disable-all: true
  enable:
    - asciicheck
    - bodyclose
    - dogsled
    - dupl
    - err113
    - errcheck
    - errorlint
    - exhaustive
    - exportloopref
    - funlen
    - gochecknoglobals
    - gochecknoinits
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - godot
    - gofmt
    - goimports
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - ineffassign
    - lll
    - mirror
    - misspell
    - mnd
    - nakedret
    - nestif
    - noctx
    - nolintlint
    - prealloc
    - revive
    - rowserrcheck
    - staticcheck
    - stylecheck
    - testifylint
    - thelper
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - whitespace
    - wsl

  # don't enable:
  # - godox  # Disabling because we need TODO lines at this stage of project.
  # - testpackage # We also need to do unit test for unexported functions. And adding _internal in all files is cumbersome.


service:
  golangci-lint-version: 1.59.x

issues:
  # exclude-use-default: false
  # exclude-use-default: false # By default, golangci-lint does not enforce comments on exported types. We want it.
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    - path: _test\.go
      linters:
        - gomnd
        - dupl
        - goconst